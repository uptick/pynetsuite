# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-01 at 22:32:31 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.account import Account
from pynetsuite.models.currency import Currency
from pynetsuite.models.customer_address_book_collection import CustomerAddressBookCollection
from pynetsuite.models.customer_alcohol_recipient_type import CustomerAlcoholRecipientType
from pynetsuite.models.customer_billing_transaction_form import CustomerBillingTransactionForm
from pynetsuite.models.customer_billing_transaction_type import CustomerBillingTransactionType
from pynetsuite.models.customer_contact_roles_collection import CustomerContactRolesCollection
from pynetsuite.models.customer_credit_hold_override import CustomerCreditHoldOverride
from pynetsuite.models.customer_currency_list_collection import CustomerCurrencyListCollection
from pynetsuite.models.customer_custom_form import CustomerCustomForm
from pynetsuite.models.customer_group_pricing_collection import CustomerGroupPricingCollection
from pynetsuite.models.customer_item_pricing_collection import CustomerItemPricingCollection
from pynetsuite.models.customer_negative_number_format import CustomerNegativeNumberFormat
from pynetsuite.models.customer_number_format import CustomerNumberFormat
from pynetsuite.models.customer_shipping_carrier import CustomerShippingCarrier
from pynetsuite.models.customer_third_party_carrier import CustomerThirdPartyCarrier
from pynetsuite.models.invoice_billing_address_country import InvoiceBillingAddressCountry
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from pynetsuite.models.ns_resource_collection import NsResourceCollection
from pynetsuite.models.term import Term
from pynetsuite.models.vendor_email_preference import VendorEmailPreference
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    custentity_dic: Optional[StrictStr] = None
    custentity_erpff_p2p_party_endpoint_id: Optional[StrictStr] = None
    custentity_nxc_cust_signature: Optional[StrictBool] = None
    email_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup &gt; Company &gt; Preferences &gt; Printing, Fax,&amp; Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Updates &gt; Mass Updates &gt; General and click Customer.", alias="emailTransactions")
    start_date: Optional[date] = Field(default=None, description="Enter the date this person or company became a customer, lead or prospect. If this person or company has a contract with you, enter the start date of the contract. If you enter an estimate or an opportunity for this customer, this field will be updated with the date of that transaction.", alias="startDate")
    last_sale_date: Optional[date] = Field(default=None, description="Returns the date of the last sale to the customer.", alias="lastSaleDate")
    custentity_payment_run_details: Optional[StrictStr] = None
    third_party_country: Optional[InvoiceBillingAddressCountry] = Field(default=None, alias="thirdPartyCountry")
    password: Optional[StrictStr] = Field(default=None, description="Assign a password to give this customer access to NetSuite. The Password Criteria fields will ensure that you create a password that meets the password policy in effect in your account. You will need to tell the user the password you assign. For more information, see the help topic NetSuite Password Requirements.")
    custentity_vl_task_resched_limit: Optional[StrictInt] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The customer&apos;s current accounts receivable balance due appears here. If you use the Multiple Currencies feature, the amount in this field is shown in the customer&apos;s currency.")
    group_invoices: Optional[StrictBool] = Field(default=None, description="Displays a check mark if the customer groups invoices.", alias="groupInvoices")
    custentity_todeleteproject: Optional[StrictBool] = None
    print_on_check_as: Optional[StrictStr] = Field(default=None, description="What you enter here prints on the Pay to the Order of line of a check instead of what you entered in the Customer field.", alias="printOnCheckAs")
    id: Optional[StrictStr] = Field(default=None, description="The internal ID for this record is shown here. If you do not want to show internal IDs, clear the Show Internal IDs box at Home &gt; Set Preferences.")
    fax: Optional[StrictStr] = Field(default=None, description="Enter a fax number for this record. You should enter the fax number exactly as it must be dialed. If a &apos;1&apos; is required to fax to this number, be sure to include it at the beginning of the number. The number you enter automatically appears in the To Be Faxed field of transactions when you select this customer. To fax NetSuite forms, an administrator must first set up fax service at Setup &gt; Set Up Printing, Fax and E-mail &gt; Fax.")
    custentity1: Optional[StrictStr] = None
    custentity_link_lsa: Optional[StrictStr] = None
    custentity_erpff_p2p_party_endp_sch_id: Optional[StrictStr] = None
    custentityhs_integration_embed: Optional[StrictStr] = None
    custentity_vl_emergency_contact_person: Optional[StrictStr] = None
    third_party_zip_code: Optional[StrictStr] = Field(default=None, description="Enter the zip code associated with the customer’s UPS or FedEx account number.", alias="thirdPartyZipCode")
    date_created: Optional[datetime] = Field(default=None, description="In this field, NetSuite automatically records the date you created this record.", alias="dateCreated")
    billing_transaction_form: Optional[CustomerBillingTransactionForm] = Field(default=None, alias="billingTransactionForm")
    overdue_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Overdue field shows the total amount owed for open transactions that are past their due date based on the invoice terms. Note: For open transactions that do not have a due date, the transaction date is used as the due date to calculate this total. If you use the Multiple Currencies feature, the amount in this field is shown in the customer&apos;s currency.", alias="overdueBalance")
    alcohol_recipient_type: Optional[CustomerAlcoholRecipientType] = Field(default=None, alias="alcoholRecipientType")
    last_name: Optional[StrictStr] = Field(default=None, description="Optionally enter a last name here.", alias="lastName")
    end_date: Optional[date] = Field(default=None, description="If you have a contract with this customer, enter the end date here. If you are entering a job record, enter the projected end date of the job here.", alias="endDate")
    phone: Optional[StrictStr] = Field(default=None, description="Enter a phone number for your customer. It will appear on the Customer List report.")
    custentity_bb1_hubspot_sync: Optional[StrictBool] = None
    company_name: Optional[StrictStr] = Field(default=None, description="Enter the legal name of the customer. If you use Auto-Generated Numbering, it is important that you enter the customer&apos;s name here, as the Customer Name field fills with the number or code for this record.", alias="companyName")
    custentity_kl_fsm_mobile_test_customer: Optional[StrictBool] = None
    custentity_erpff_p2p_party_endp_op_id: Optional[StrictStr] = None
    custentity_ff_sc_entity_ita_apy_code: Optional[StrictStr] = None
    default_address: Optional[StrictStr] = Field(default=None, description="This field automatically shows the default billing address that you enter and add using the Address subtab.", alias="defaultAddress")
    opening_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the opening balance of this customer&apos;s account.", alias="openingBalance")
    credit_hold_override: Optional[CustomerCreditHoldOverride] = Field(default=None, alias="creditHoldOverride")
    is_person: Optional[StrictBool] = Field(default=None, description="Choose the type of customer record you are creating by selecting Company or Individual in the Type field. This selection determines which fields and subtabs are used on this record.", alias="isPerson")
    custentity_erpff_p2p_auto_send_document: Optional[StrictBool] = None
    password2: Optional[StrictStr] = Field(default=None, description="Reenter the password in this field to verify that you entered the same password twice.")
    email: Optional[StrictStr] = Field(default=None, description="Enter your customer&apos;s email address. If you allow your customers to access their accounts online, this becomes part of their access codes.")
    opening_balance_date: Optional[date] = Field(default=None, description="Enter the date of the balance entered in the Opening Balance field.", alias="openingBalanceDate")
    custentity_tax_contact_last: Optional[StrictStr] = None
    custentity_bb1_cc_note: Optional[StrictStr] = None
    deposit_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Customer Deposit Balance field displays the total amount of unapplied deposits for the customer. Deposits are recorded in the general ledger, as a liability, when the customer makes an advance payment before delivery of goods or services. A deposit balance exists until the goods or services are delivered. Deposits do not affect the customer&apos;s accounts receivable balance. If you use the Multiple Currencies feature, the amount in this field is shown in the customer&apos;s currency.", alias="depositBalance")
    last_order_date: Optional[date] = Field(default=None, description="Returns the date of the last order from the customer.", alias="lastOrderDate")
    url: Optional[StrictStr] = Field(default=None, description="Enter the URL associated with this customer.")
    first_sale_date: Optional[date] = Field(default=None, description="Returns the date of the first sale to the customer.", alias="firstSaleDate")
    custom_form: Optional[CustomerCustomForm] = Field(default=None, alias="customForm")
    custentity_vl_site_allocation: Optional[StrictStr] = None
    auto_name: Optional[StrictBool] = Field(default=None, description="Clear this box to manually enter a name for this record. If you leave this box marked, NetSuite assigns a name or number for this record based on your settings at Setup &gt; Set Up Auto-Generated Numbers.", alias="autoName")
    custentity_ico: Optional[StrictStr] = None
    aging: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overdue A/R balance is shown here with the balance totals for each aging period.")
    ship_complete: Optional[StrictBool] = Field(default=None, description="Check this box if you only want to ship orders to this customer when they are completely fulfilled.", alias="shipComplete")
    custentity_tax_contact_middle: Optional[StrictStr] = None
    custentity_date_lsa: Optional[date] = None
    custentity_bb1_cc_lasttype: Optional[StrictStr] = None
    third_party_carrier: Optional[CustomerThirdPartyCarrier] = Field(default=None, alias="thirdPartyCarrier")
    external_id: Optional[StrictStr] = Field(default=None, description="Returns the customer&apos;s external ID, if one is assigned.", alias="externalId")
    custentity_erpff_p2p_basw_tax_id: Optional[StrictStr] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Enter the name of this customer, prospect or lead the way it should appear in all lists and on the Pay to the Order of line of checks. If you use Auto-Generated Numbering, the customer number or code fills here. Enter the customer name in the Company Name field.", alias="entityId")
    email_preference: Optional[VendorEmailPreference] = Field(default=None, alias="emailPreference")
    custentity_bb1_missingrecord: Optional[StrictBool] = None
    number_format: Optional[CustomerNumberFormat] = Field(default=None, alias="numberFormat")
    is_autogenerated_representing_entity: Optional[StrictBool] = Field(default=None, description="This field indicates that this entity was automatically generated by NetSuite to represent a specific subsidiary.", alias="isAutogeneratedRepresentingEntity")
    is_budget_approved: Optional[StrictBool] = Field(default=None, description="Check this box if the customer&apos;s budget has been approved.", alias="isBudgetApproved")
    mobile_phone: Optional[StrictStr] = Field(default=None, description="Enter a mobile or cell phone number for this person.", alias="mobilePhone")
    custentity_cusstatementname: Optional[StrictStr] = None
    unbilled_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This field displays the total amount of orders that have been entered but not yet billed. If you have enabled the preference Customer Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at Setup &gt; Accounting &gt; Preferences &gt; Accounting Preferences &gt; General. If you use the Multiple Currencies feature, the amount in this field is shown in the customer&apos;s currency.", alias="unbilledOrders")
    search_stage: Optional[StrictStr] = Field(default=None, description="Returns the stage of the customer record, such as Customer or Lead.", alias="searchStage")
    alt_phone: Optional[StrictStr] = Field(default=None, description="If applicable, enter an alternate phone number for this record.", alias="altPhone")
    first_order_date: Optional[date] = Field(default=None, description="Returns the date of the first order from the customer.", alias="firstOrderDate")
    fax_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup &gt; Company &gt; Preferences &gt; Printing, Fax,&amp; Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Updates &gt; Mass Updates &gt; General and click Customer.", alias="faxTransactions")
    resale_number: Optional[StrictStr] = Field(default=None, description="If you do not collect sales tax from this customer because your merchandise will be resold, enter your customer&apos;s valid tax license number here. Make sure that you also set the Not Taxable tax code for this customer.", alias="resaleNumber")
    custentity_nxc_customer_account: Optional[StrictStr] = None
    alt_email: Optional[StrictStr] = Field(default=None, description="Enter an alternate email address for this customer. If you use the Capture Email Replies, email sent with the alternate email address are automatically attached to the customer record.", alias="altEmail")
    default_order_priority: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter a number to designate the priority for this customer.", alias="defaultOrderPriority")
    custentity_tax_contact_first: Optional[StrictStr] = None
    salutation: Optional[StrictStr] = Field(default=None, description="Enter the title of this person, such as Mr., Mrs., Ms., Dr., Rev., etc.")
    is_inactive: Optional[StrictBool] = Field(default=None, description="When you check this box, this customer will no longer appear on customer, prospect or lead list unless you check the Show Inactives box at the bottom of the list page. This customer&apos;s name will also no longer appear in other dropdown lists containing customers, and the customer will no longer have access to NetSuite or be able to sign into your Web store.", alias="isInactive")
    first_name: Optional[StrictStr] = Field(default=None, description="Enter this customer&apos;s name.", alias="firstName")
    third_party_acct: Optional[StrictStr] = Field(default=None, description="Enter this customer’s FedEx® or UPS® account number in the 3rd Party Billing Account Number field. This account number is used if you select Consignee Billing on item fulfillments using UPS or select Bill Recipient on item fulfillments using FedEx.", alias="thirdPartyAcct")
    custentity_bb1_cc_lastemail: Optional[date] = None
    home_phone: Optional[StrictStr] = Field(default=None, description="Enter a home phone number for this person.", alias="homePhone")
    estimated_budget: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the estimated budget the prospect or customer has for this opportunity.", alias="estimatedBudget")
    custentity_bb1_last_statement: Optional[date] = None
    title: Optional[StrictStr] = Field(default=None, description="Enter the job title for this person&apos;s position at his or her company.")
    default_shipping_address: Optional[StrictStr] = Field(default=None, description="Returns the customer&apos;s default shipping address, if one is entered on the customer record.", alias="defaultShippingAddress")
    give_access: Optional[StrictBool] = Field(default=None, description="Check this box to give your customer access to NetSuite. The Customer Center role gives a customer access to view estimates, orders, invoices and payments.", alias="giveAccess")
    negative_number_format: Optional[CustomerNegativeNumberFormat] = Field(default=None, alias="negativeNumberFormat")
    billing_transaction_type: Optional[CustomerBillingTransactionType] = Field(default=None, alias="billingTransactionType")
    shipping_carrier: Optional[CustomerShippingCarrier] = Field(default=None, alias="shippingCarrier")
    aging2: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overdue A/R balance is shown here with the balance totals for each aging period.")
    aging3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overdue A/R balance is shown here with the balance totals for each aging period.")
    aging1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overdue A/R balance is shown here with the balance totals for each aging period.")
    aging4: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The overdue A/R balance is shown here with the balance totals for each aging period.")
    comments: Optional[StrictStr] = Field(default=None, description="Enter any other information you wish to track for this customer.")
    account_number: Optional[StrictStr] = Field(default=None, description="If you assign accounts to your customers, enter an account number for this customer here.", alias="accountNumber")
    reminder_days: Optional[StrictInt] = Field(default=None, description="Enter how many days before the end date you want to be reminded that this customer&apos;s contract or job service needs renewing. You can set the reminder to appear in the Reminders portlet on your Home, Lists and Transactions pages by clicking Customize Page on each page. On the Layout tab, click the Right Side Content subtab, and check the Reminders box. Then click the Reminders subtab, and check the Customers to Review box. Click Save.", alias="reminderDays")
    last_modified_date: Optional[datetime] = Field(default=None, description="Returns the date on which the customer record was last modified.", alias="lastModifiedDate")
    custentity_bb1_customer_approved: Optional[StrictBool] = None
    middle_name: Optional[StrictStr] = Field(default=None, description="Returns the customer&apos;s middle name or initial, if one is entered on the customer record.", alias="middleName")
    print_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this customer. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the customer on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this customer is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this customer is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this customer is selected. Once you enter these settings on the customer record, these boxes are checked by default for transactions created from the customer record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new customer records at Setup &gt; Company &gt; Preferences &gt; Printing, Fax,&amp; Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Customers Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Updates &gt; Mass Updates &gt; General and click Customer.", alias="printTransactions")
    custentity_bb1_dispute_reason: Optional[StrictStr] = None
    custentity_link_name_lsa: Optional[StrictStr] = None
    custentity_bb1_credit_control_checked: Optional[StrictBool] = None
    custentity_bb1_cc_pause: Optional[StrictBool] = None
    days_overdue: Optional[StrictInt] = Field(default=None, description="The number of days overdue this balance is overdue is shown here.", alias="daysOverdue")
    custentity_erpff_p2p_basw_tax_scheme_id: Optional[StrictStr] = None
    credit_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter a credit limit to define the maximum currency amount the customer is allowed to accrue in outstanding receivables. When you meet or exceed this customer&apos;s limit while you are entering transactions, NetSuite can warn you or block the transaction. To set preferences for credit limit handling, an administrator must go to Setup &gt; Accounting &gt; Accounting Preferences &gt; General &gt; Customer Credit Limit Handling. For more information, click Help at the top of the page and search for Customer Credit Limits and Holds.", alias="creditLimit")
    send_email: Optional[StrictBool] = Field(default=None, description="Check this box to automatically send an email notifying this customer that you have them access to NetSuite. The standard NetSuite email message also contains a link to let the user create a password. If you do not check this box, you must check the Manually Assign or Change Password box. You must create the password, and tell the user the password, and when and how to log in. For security reasons, do not send the password by email.", alias="sendEmail")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    contact_roles: Optional[CustomerContactRolesCollection] = Field(default=None, alias="contactRoles")
    buying_reason: Optional[NsResource] = Field(default=None, alias="buyingReason")
    contact: Optional[NsResource] = None
    custentity_tax_contact: Optional[NsResource] = None
    terms: Optional[Term] = None
    custentity_4601_defaultwitaxcode: Optional[NsResource] = None
    default_bank_account: Optional[Account] = Field(default=None, alias="defaultBankAccount")
    partner: Optional[NsResource] = None
    custentity_ph4185_bstyle: Optional[NsResource] = None
    receivables_account: Optional[Account] = Field(default=None, alias="receivablesAccount")
    sales_readiness: Optional[NsResource] = Field(default=None, alias="salesReadiness")
    group_pricing: Optional[CustomerGroupPricingCollection] = Field(default=None, alias="groupPricing")
    category: Optional[NsResource] = None
    source_web_site: Optional[NsResource] = Field(default=None, alias="sourceWebSite")
    pref_cc_processor: Optional[NsResource] = Field(default=None, alias="prefCcProcessor")
    sales_rep: Optional[NsResource] = Field(default=None, alias="salesRep")
    shipping_item: Optional[NsResource] = Field(default=None, alias="shippingItem")
    billing_schedule: Optional[NsResource] = Field(default=None, alias="billingSchedule")
    assigned_web_site: Optional[NsResource] = Field(default=None, alias="assignedWebSite")
    opening_balance_account: Optional[Account] = Field(default=None, alias="openingBalanceAccount")
    lead_source: Optional[NsResource] = Field(default=None, alias="leadSource")
    subsidiary: Optional[NsResource] = None
    custentity_ff_sc_entity_ita_pay_term: Optional[NsResource] = None
    territory: Optional[NsResource] = None
    item_pricing: Optional[CustomerItemPricingCollection] = Field(default=None, alias="itemPricing")
    custentity_ff_sc_bank_details: Optional[NsResource] = None
    buying_time_frame: Optional[NsResource] = Field(default=None, alias="buyingTimeFrame")
    entity_status: Optional[NsResource] = Field(default=None, alias="entityStatus")
    custentity_erpff_p2p_party_endp_scheme: Optional[NsResource] = None
    custentity_bb1_market: Optional[NsResource] = None
    currency_list: Optional[CustomerCurrencyListCollection] = Field(default=None, alias="currencyList")
    billing_rate_card: Optional[NsResource] = Field(default=None, alias="billingRateCard")
    custentity_ff_sc_bank_details_sec: Optional[NsResource] = None
    dr_account: Optional[Account] = Field(default=None, alias="drAccount")
    top_level_parent: Optional[Customer] = Field(default=None, alias="topLevelParent")
    representing_subsidiary: Optional[NsResource] = Field(default=None, alias="representingSubsidiary")
    contact_list: Optional[NsResourceCollection] = Field(default=None, alias="contactList")
    currency: Optional[Currency] = None
    parent: Optional[Customer] = None
    custentity_erpff_p2p_basw_tax_scheme: Optional[NsResource] = None
    price_level: Optional[NsResource] = Field(default=None, alias="priceLevel")
    image: Optional[NsResource] = None
    address_book: Optional[CustomerAddressBookCollection] = Field(default=None, alias="addressBook")
    __properties: ClassVar[List[str]] = ["custentity_dic", "custentity_erpff_p2p_party_endpoint_id", "custentity_nxc_cust_signature", "emailTransactions", "startDate", "lastSaleDate", "custentity_payment_run_details", "thirdPartyCountry", "password", "custentity_vl_task_resched_limit", "balance", "groupInvoices", "custentity_todeleteproject", "printOnCheckAs", "id", "fax", "custentity1", "custentity_link_lsa", "custentity_erpff_p2p_party_endp_sch_id", "custentityhs_integration_embed", "custentity_vl_emergency_contact_person", "thirdPartyZipCode", "dateCreated", "billingTransactionForm", "overdueBalance", "alcoholRecipientType", "lastName", "endDate", "phone", "custentity_bb1_hubspot_sync", "companyName", "custentity_kl_fsm_mobile_test_customer", "custentity_erpff_p2p_party_endp_op_id", "custentity_ff_sc_entity_ita_apy_code", "defaultAddress", "openingBalance", "creditHoldOverride", "isPerson", "custentity_erpff_p2p_auto_send_document", "password2", "email", "openingBalanceDate", "custentity_tax_contact_last", "custentity_bb1_cc_note", "depositBalance", "lastOrderDate", "url", "firstSaleDate", "customForm", "custentity_vl_site_allocation", "autoName", "custentity_ico", "aging", "shipComplete", "custentity_tax_contact_middle", "custentity_date_lsa", "custentity_bb1_cc_lasttype", "thirdPartyCarrier", "externalId", "custentity_erpff_p2p_basw_tax_id", "entityId", "emailPreference", "custentity_bb1_missingrecord", "numberFormat", "isAutogeneratedRepresentingEntity", "isBudgetApproved", "mobilePhone", "custentity_cusstatementname", "unbilledOrders", "searchStage", "altPhone", "firstOrderDate", "faxTransactions", "resaleNumber", "custentity_nxc_customer_account", "altEmail", "defaultOrderPriority", "custentity_tax_contact_first", "salutation", "isInactive", "firstName", "thirdPartyAcct", "custentity_bb1_cc_lastemail", "homePhone", "estimatedBudget", "custentity_bb1_last_statement", "title", "defaultShippingAddress", "giveAccess", "negativeNumberFormat", "billingTransactionType", "shippingCarrier", "aging2", "aging3", "aging1", "aging4", "comments", "accountNumber", "reminderDays", "lastModifiedDate", "custentity_bb1_customer_approved", "middleName", "printTransactions", "custentity_bb1_dispute_reason", "custentity_link_name_lsa", "custentity_bb1_credit_control_checked", "custentity_bb1_cc_pause", "daysOverdue", "custentity_erpff_p2p_basw_tax_scheme_id", "creditLimit", "sendEmail", "refName", "links", "contactRoles", "buyingReason", "contact", "custentity_tax_contact", "terms", "custentity_4601_defaultwitaxcode", "defaultBankAccount", "partner", "custentity_ph4185_bstyle", "receivablesAccount", "salesReadiness", "groupPricing", "category", "sourceWebSite", "prefCcProcessor", "salesRep", "shippingItem", "billingSchedule", "assignedWebSite", "openingBalanceAccount", "leadSource", "subsidiary", "custentity_ff_sc_entity_ita_pay_term", "territory", "itemPricing", "custentity_ff_sc_bank_details", "buyingTimeFrame", "entityStatus", "custentity_erpff_p2p_party_endp_scheme", "custentity_bb1_market", "currencyList", "billingRateCard", "custentity_ff_sc_bank_details_sec", "drAccount", "topLevelParent", "representingSubsidiary", "contactList", "currency", "parent", "custentity_erpff_p2p_basw_tax_scheme", "priceLevel", "image", "addressBook"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of third_party_country
        if self.third_party_country:
            _dict['thirdPartyCountry'] = self.third_party_country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_transaction_form
        if self.billing_transaction_form:
            _dict['billingTransactionForm'] = self.billing_transaction_form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alcohol_recipient_type
        if self.alcohol_recipient_type:
            _dict['alcoholRecipientType'] = self.alcohol_recipient_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_hold_override
        if self.credit_hold_override:
            _dict['creditHoldOverride'] = self.credit_hold_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_form
        if self.custom_form:
            _dict['customForm'] = self.custom_form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of third_party_carrier
        if self.third_party_carrier:
            _dict['thirdPartyCarrier'] = self.third_party_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_preference
        if self.email_preference:
            _dict['emailPreference'] = self.email_preference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of number_format
        if self.number_format:
            _dict['numberFormat'] = self.number_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of negative_number_format
        if self.negative_number_format:
            _dict['negativeNumberFormat'] = self.negative_number_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_transaction_type
        if self.billing_transaction_type:
            _dict['billingTransactionType'] = self.billing_transaction_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_carrier
        if self.shipping_carrier:
            _dict['shippingCarrier'] = self.shipping_carrier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of contact_roles
        if self.contact_roles:
            _dict['contactRoles'] = self.contact_roles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buying_reason
        if self.buying_reason:
            _dict['buyingReason'] = self.buying_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_tax_contact
        if self.custentity_tax_contact:
            _dict['custentity_tax_contact'] = self.custentity_tax_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_4601_defaultwitaxcode
        if self.custentity_4601_defaultwitaxcode:
            _dict['custentity_4601_defaultwitaxcode'] = self.custentity_4601_defaultwitaxcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_bank_account
        if self.default_bank_account:
            _dict['defaultBankAccount'] = self.default_bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ph4185_bstyle
        if self.custentity_ph4185_bstyle:
            _dict['custentity_ph4185_bstyle'] = self.custentity_ph4185_bstyle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receivables_account
        if self.receivables_account:
            _dict['receivablesAccount'] = self.receivables_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_readiness
        if self.sales_readiness:
            _dict['salesReadiness'] = self.sales_readiness.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_pricing
        if self.group_pricing:
            _dict['groupPricing'] = self.group_pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_web_site
        if self.source_web_site:
            _dict['sourceWebSite'] = self.source_web_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pref_cc_processor
        if self.pref_cc_processor:
            _dict['prefCcProcessor'] = self.pref_cc_processor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sales_rep
        if self.sales_rep:
            _dict['salesRep'] = self.sales_rep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_item
        if self.shipping_item:
            _dict['shippingItem'] = self.shipping_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_schedule
        if self.billing_schedule:
            _dict['billingSchedule'] = self.billing_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assigned_web_site
        if self.assigned_web_site:
            _dict['assignedWebSite'] = self.assigned_web_site.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening_balance_account
        if self.opening_balance_account:
            _dict['openingBalanceAccount'] = self.opening_balance_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lead_source
        if self.lead_source:
            _dict['leadSource'] = self.lead_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subsidiary
        if self.subsidiary:
            _dict['subsidiary'] = self.subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_entity_ita_pay_term
        if self.custentity_ff_sc_entity_ita_pay_term:
            _dict['custentity_ff_sc_entity_ita_pay_term'] = self.custentity_ff_sc_entity_ita_pay_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of territory
        if self.territory:
            _dict['territory'] = self.territory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_pricing
        if self.item_pricing:
            _dict['itemPricing'] = self.item_pricing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_bank_details
        if self.custentity_ff_sc_bank_details:
            _dict['custentity_ff_sc_bank_details'] = self.custentity_ff_sc_bank_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buying_time_frame
        if self.buying_time_frame:
            _dict['buyingTimeFrame'] = self.buying_time_frame.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_status
        if self.entity_status:
            _dict['entityStatus'] = self.entity_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_erpff_p2p_party_endp_scheme
        if self.custentity_erpff_p2p_party_endp_scheme:
            _dict['custentity_erpff_p2p_party_endp_scheme'] = self.custentity_erpff_p2p_party_endp_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_bb1_market
        if self.custentity_bb1_market:
            _dict['custentity_bb1_market'] = self.custentity_bb1_market.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_list
        if self.currency_list:
            _dict['currencyList'] = self.currency_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_rate_card
        if self.billing_rate_card:
            _dict['billingRateCard'] = self.billing_rate_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_bank_details_sec
        if self.custentity_ff_sc_bank_details_sec:
            _dict['custentity_ff_sc_bank_details_sec'] = self.custentity_ff_sc_bank_details_sec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dr_account
        if self.dr_account:
            _dict['drAccount'] = self.dr_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_level_parent
        if self.top_level_parent:
            _dict['topLevelParent'] = self.top_level_parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of representing_subsidiary
        if self.representing_subsidiary:
            _dict['representingSubsidiary'] = self.representing_subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_list
        if self.contact_list:
            _dict['contactList'] = self.contact_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_erpff_p2p_basw_tax_scheme
        if self.custentity_erpff_p2p_basw_tax_scheme:
            _dict['custentity_erpff_p2p_basw_tax_scheme'] = self.custentity_erpff_p2p_basw_tax_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_level
        if self.price_level:
            _dict['priceLevel'] = self.price_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address_book
        if self.address_book:
            _dict['addressBook'] = self.address_book.to_dict()
        # set to None if custentity_dic (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_dic is None and "custentity_dic" in self.model_fields_set:
            _dict['custentity_dic'] = None

        # set to None if custentity_erpff_p2p_party_endpoint_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endpoint_id is None and "custentity_erpff_p2p_party_endpoint_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endpoint_id'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if last_sale_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_sale_date is None and "last_sale_date" in self.model_fields_set:
            _dict['lastSaleDate'] = None

        # set to None if custentity_payment_run_details (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_payment_run_details is None and "custentity_payment_run_details" in self.model_fields_set:
            _dict['custentity_payment_run_details'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if custentity_vl_task_resched_limit (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_task_resched_limit is None and "custentity_vl_task_resched_limit" in self.model_fields_set:
            _dict['custentity_vl_task_resched_limit'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if print_on_check_as (nullable) is None
        # and model_fields_set contains the field
        if self.print_on_check_as is None and "print_on_check_as" in self.model_fields_set:
            _dict['printOnCheckAs'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['fax'] = None

        # set to None if custentity1 (nullable) is None
        # and model_fields_set contains the field
        if self.custentity1 is None and "custentity1" in self.model_fields_set:
            _dict['custentity1'] = None

        # set to None if custentity_link_lsa (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_link_lsa is None and "custentity_link_lsa" in self.model_fields_set:
            _dict['custentity_link_lsa'] = None

        # set to None if custentity_erpff_p2p_party_endp_sch_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endp_sch_id is None and "custentity_erpff_p2p_party_endp_sch_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endp_sch_id'] = None

        # set to None if custentityhs_integration_embed (nullable) is None
        # and model_fields_set contains the field
        if self.custentityhs_integration_embed is None and "custentityhs_integration_embed" in self.model_fields_set:
            _dict['custentityhs_integration_embed'] = None

        # set to None if custentity_vl_emergency_contact_person (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_emergency_contact_person is None and "custentity_vl_emergency_contact_person" in self.model_fields_set:
            _dict['custentity_vl_emergency_contact_person'] = None

        # set to None if third_party_zip_code (nullable) is None
        # and model_fields_set contains the field
        if self.third_party_zip_code is None and "third_party_zip_code" in self.model_fields_set:
            _dict['thirdPartyZipCode'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['dateCreated'] = None

        # set to None if overdue_balance (nullable) is None
        # and model_fields_set contains the field
        if self.overdue_balance is None and "overdue_balance" in self.model_fields_set:
            _dict['overdueBalance'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if custentity_erpff_p2p_party_endp_op_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endp_op_id is None and "custentity_erpff_p2p_party_endp_op_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endp_op_id'] = None

        # set to None if custentity_ff_sc_entity_ita_apy_code (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_entity_ita_apy_code is None and "custentity_ff_sc_entity_ita_apy_code" in self.model_fields_set:
            _dict['custentity_ff_sc_entity_ita_apy_code'] = None

        # set to None if default_address (nullable) is None
        # and model_fields_set contains the field
        if self.default_address is None and "default_address" in self.model_fields_set:
            _dict['defaultAddress'] = None

        # set to None if opening_balance (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance is None and "opening_balance" in self.model_fields_set:
            _dict['openingBalance'] = None

        # set to None if password2 (nullable) is None
        # and model_fields_set contains the field
        if self.password2 is None and "password2" in self.model_fields_set:
            _dict['password2'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if opening_balance_date (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance_date is None and "opening_balance_date" in self.model_fields_set:
            _dict['openingBalanceDate'] = None

        # set to None if custentity_tax_contact_last (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_last is None and "custentity_tax_contact_last" in self.model_fields_set:
            _dict['custentity_tax_contact_last'] = None

        # set to None if custentity_bb1_cc_note (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cc_note is None and "custentity_bb1_cc_note" in self.model_fields_set:
            _dict['custentity_bb1_cc_note'] = None

        # set to None if deposit_balance (nullable) is None
        # and model_fields_set contains the field
        if self.deposit_balance is None and "deposit_balance" in self.model_fields_set:
            _dict['depositBalance'] = None

        # set to None if last_order_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_order_date is None and "last_order_date" in self.model_fields_set:
            _dict['lastOrderDate'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if first_sale_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_sale_date is None and "first_sale_date" in self.model_fields_set:
            _dict['firstSaleDate'] = None

        # set to None if custentity_vl_site_allocation (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_site_allocation is None and "custentity_vl_site_allocation" in self.model_fields_set:
            _dict['custentity_vl_site_allocation'] = None

        # set to None if custentity_ico (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ico is None and "custentity_ico" in self.model_fields_set:
            _dict['custentity_ico'] = None

        # set to None if aging (nullable) is None
        # and model_fields_set contains the field
        if self.aging is None and "aging" in self.model_fields_set:
            _dict['aging'] = None

        # set to None if custentity_tax_contact_middle (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_middle is None and "custentity_tax_contact_middle" in self.model_fields_set:
            _dict['custentity_tax_contact_middle'] = None

        # set to None if custentity_date_lsa (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_date_lsa is None and "custentity_date_lsa" in self.model_fields_set:
            _dict['custentity_date_lsa'] = None

        # set to None if custentity_bb1_cc_lasttype (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cc_lasttype is None and "custentity_bb1_cc_lasttype" in self.model_fields_set:
            _dict['custentity_bb1_cc_lasttype'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if custentity_erpff_p2p_basw_tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_basw_tax_id is None and "custentity_erpff_p2p_basw_tax_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_basw_tax_id'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entityId'] = None

        # set to None if mobile_phone (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_phone is None and "mobile_phone" in self.model_fields_set:
            _dict['mobilePhone'] = None

        # set to None if custentity_cusstatementname (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_cusstatementname is None and "custentity_cusstatementname" in self.model_fields_set:
            _dict['custentity_cusstatementname'] = None

        # set to None if unbilled_orders (nullable) is None
        # and model_fields_set contains the field
        if self.unbilled_orders is None and "unbilled_orders" in self.model_fields_set:
            _dict['unbilledOrders'] = None

        # set to None if search_stage (nullable) is None
        # and model_fields_set contains the field
        if self.search_stage is None and "search_stage" in self.model_fields_set:
            _dict['searchStage'] = None

        # set to None if alt_phone (nullable) is None
        # and model_fields_set contains the field
        if self.alt_phone is None and "alt_phone" in self.model_fields_set:
            _dict['altPhone'] = None

        # set to None if first_order_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_order_date is None and "first_order_date" in self.model_fields_set:
            _dict['firstOrderDate'] = None

        # set to None if resale_number (nullable) is None
        # and model_fields_set contains the field
        if self.resale_number is None and "resale_number" in self.model_fields_set:
            _dict['resaleNumber'] = None

        # set to None if custentity_nxc_customer_account (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_nxc_customer_account is None and "custentity_nxc_customer_account" in self.model_fields_set:
            _dict['custentity_nxc_customer_account'] = None

        # set to None if alt_email (nullable) is None
        # and model_fields_set contains the field
        if self.alt_email is None and "alt_email" in self.model_fields_set:
            _dict['altEmail'] = None

        # set to None if default_order_priority (nullable) is None
        # and model_fields_set contains the field
        if self.default_order_priority is None and "default_order_priority" in self.model_fields_set:
            _dict['defaultOrderPriority'] = None

        # set to None if custentity_tax_contact_first (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_first is None and "custentity_tax_contact_first" in self.model_fields_set:
            _dict['custentity_tax_contact_first'] = None

        # set to None if salutation (nullable) is None
        # and model_fields_set contains the field
        if self.salutation is None and "salutation" in self.model_fields_set:
            _dict['salutation'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if third_party_acct (nullable) is None
        # and model_fields_set contains the field
        if self.third_party_acct is None and "third_party_acct" in self.model_fields_set:
            _dict['thirdPartyAcct'] = None

        # set to None if custentity_bb1_cc_lastemail (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cc_lastemail is None and "custentity_bb1_cc_lastemail" in self.model_fields_set:
            _dict['custentity_bb1_cc_lastemail'] = None

        # set to None if home_phone (nullable) is None
        # and model_fields_set contains the field
        if self.home_phone is None and "home_phone" in self.model_fields_set:
            _dict['homePhone'] = None

        # set to None if estimated_budget (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_budget is None and "estimated_budget" in self.model_fields_set:
            _dict['estimatedBudget'] = None

        # set to None if custentity_bb1_last_statement (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_last_statement is None and "custentity_bb1_last_statement" in self.model_fields_set:
            _dict['custentity_bb1_last_statement'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if default_shipping_address (nullable) is None
        # and model_fields_set contains the field
        if self.default_shipping_address is None and "default_shipping_address" in self.model_fields_set:
            _dict['defaultShippingAddress'] = None

        # set to None if aging2 (nullable) is None
        # and model_fields_set contains the field
        if self.aging2 is None and "aging2" in self.model_fields_set:
            _dict['aging2'] = None

        # set to None if aging3 (nullable) is None
        # and model_fields_set contains the field
        if self.aging3 is None and "aging3" in self.model_fields_set:
            _dict['aging3'] = None

        # set to None if aging1 (nullable) is None
        # and model_fields_set contains the field
        if self.aging1 is None and "aging1" in self.model_fields_set:
            _dict['aging1'] = None

        # set to None if aging4 (nullable) is None
        # and model_fields_set contains the field
        if self.aging4 is None and "aging4" in self.model_fields_set:
            _dict['aging4'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if reminder_days (nullable) is None
        # and model_fields_set contains the field
        if self.reminder_days is None and "reminder_days" in self.model_fields_set:
            _dict['reminderDays'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middleName'] = None

        # set to None if custentity_bb1_dispute_reason (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_dispute_reason is None and "custentity_bb1_dispute_reason" in self.model_fields_set:
            _dict['custentity_bb1_dispute_reason'] = None

        # set to None if custentity_link_name_lsa (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_link_name_lsa is None and "custentity_link_name_lsa" in self.model_fields_set:
            _dict['custentity_link_name_lsa'] = None

        # set to None if days_overdue (nullable) is None
        # and model_fields_set contains the field
        if self.days_overdue is None and "days_overdue" in self.model_fields_set:
            _dict['daysOverdue'] = None

        # set to None if custentity_erpff_p2p_basw_tax_scheme_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_basw_tax_scheme_id is None and "custentity_erpff_p2p_basw_tax_scheme_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_basw_tax_scheme_id'] = None

        # set to None if credit_limit (nullable) is None
        # and model_fields_set contains the field
        if self.credit_limit is None and "credit_limit" in self.model_fields_set:
            _dict['creditLimit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custentity_dic": obj.get("custentity_dic"),
            "custentity_erpff_p2p_party_endpoint_id": obj.get("custentity_erpff_p2p_party_endpoint_id"),
            "custentity_nxc_cust_signature": obj.get("custentity_nxc_cust_signature"),
            "emailTransactions": obj.get("emailTransactions"),
            "startDate": obj.get("startDate"),
            "lastSaleDate": obj.get("lastSaleDate"),
            "custentity_payment_run_details": obj.get("custentity_payment_run_details"),
            "thirdPartyCountry": InvoiceBillingAddressCountry.from_dict(obj["thirdPartyCountry"]) if obj.get("thirdPartyCountry") is not None else None,
            "password": obj.get("password"),
            "custentity_vl_task_resched_limit": obj.get("custentity_vl_task_resched_limit"),
            "balance": obj.get("balance"),
            "groupInvoices": obj.get("groupInvoices"),
            "custentity_todeleteproject": obj.get("custentity_todeleteproject"),
            "printOnCheckAs": obj.get("printOnCheckAs"),
            "id": obj.get("id"),
            "fax": obj.get("fax"),
            "custentity1": obj.get("custentity1"),
            "custentity_link_lsa": obj.get("custentity_link_lsa"),
            "custentity_erpff_p2p_party_endp_sch_id": obj.get("custentity_erpff_p2p_party_endp_sch_id"),
            "custentityhs_integration_embed": obj.get("custentityhs_integration_embed"),
            "custentity_vl_emergency_contact_person": obj.get("custentity_vl_emergency_contact_person"),
            "thirdPartyZipCode": obj.get("thirdPartyZipCode"),
            "dateCreated": obj.get("dateCreated"),
            "billingTransactionForm": CustomerBillingTransactionForm.from_dict(obj["billingTransactionForm"]) if obj.get("billingTransactionForm") is not None else None,
            "overdueBalance": obj.get("overdueBalance"),
            "alcoholRecipientType": CustomerAlcoholRecipientType.from_dict(obj["alcoholRecipientType"]) if obj.get("alcoholRecipientType") is not None else None,
            "lastName": obj.get("lastName"),
            "endDate": obj.get("endDate"),
            "phone": obj.get("phone"),
            "custentity_bb1_hubspot_sync": obj.get("custentity_bb1_hubspot_sync"),
            "companyName": obj.get("companyName"),
            "custentity_kl_fsm_mobile_test_customer": obj.get("custentity_kl_fsm_mobile_test_customer"),
            "custentity_erpff_p2p_party_endp_op_id": obj.get("custentity_erpff_p2p_party_endp_op_id"),
            "custentity_ff_sc_entity_ita_apy_code": obj.get("custentity_ff_sc_entity_ita_apy_code"),
            "defaultAddress": obj.get("defaultAddress"),
            "openingBalance": obj.get("openingBalance"),
            "creditHoldOverride": CustomerCreditHoldOverride.from_dict(obj["creditHoldOverride"]) if obj.get("creditHoldOverride") is not None else None,
            "isPerson": obj.get("isPerson"),
            "custentity_erpff_p2p_auto_send_document": obj.get("custentity_erpff_p2p_auto_send_document"),
            "password2": obj.get("password2"),
            "email": obj.get("email"),
            "openingBalanceDate": obj.get("openingBalanceDate"),
            "custentity_tax_contact_last": obj.get("custentity_tax_contact_last"),
            "custentity_bb1_cc_note": obj.get("custentity_bb1_cc_note"),
            "depositBalance": obj.get("depositBalance"),
            "lastOrderDate": obj.get("lastOrderDate"),
            "url": obj.get("url"),
            "firstSaleDate": obj.get("firstSaleDate"),
            "customForm": CustomerCustomForm.from_dict(obj["customForm"]) if obj.get("customForm") is not None else None,
            "custentity_vl_site_allocation": obj.get("custentity_vl_site_allocation"),
            "autoName": obj.get("autoName"),
            "custentity_ico": obj.get("custentity_ico"),
            "aging": obj.get("aging"),
            "shipComplete": obj.get("shipComplete"),
            "custentity_tax_contact_middle": obj.get("custentity_tax_contact_middle"),
            "custentity_date_lsa": obj.get("custentity_date_lsa"),
            "custentity_bb1_cc_lasttype": obj.get("custentity_bb1_cc_lasttype"),
            "thirdPartyCarrier": CustomerThirdPartyCarrier.from_dict(obj["thirdPartyCarrier"]) if obj.get("thirdPartyCarrier") is not None else None,
            "externalId": obj.get("externalId"),
            "custentity_erpff_p2p_basw_tax_id": obj.get("custentity_erpff_p2p_basw_tax_id"),
            "entityId": obj.get("entityId"),
            "emailPreference": VendorEmailPreference.from_dict(obj["emailPreference"]) if obj.get("emailPreference") is not None else None,
            "custentity_bb1_missingrecord": obj.get("custentity_bb1_missingrecord"),
            "numberFormat": CustomerNumberFormat.from_dict(obj["numberFormat"]) if obj.get("numberFormat") is not None else None,
            "isAutogeneratedRepresentingEntity": obj.get("isAutogeneratedRepresentingEntity"),
            "isBudgetApproved": obj.get("isBudgetApproved"),
            "mobilePhone": obj.get("mobilePhone"),
            "custentity_cusstatementname": obj.get("custentity_cusstatementname"),
            "unbilledOrders": obj.get("unbilledOrders"),
            "searchStage": obj.get("searchStage"),
            "altPhone": obj.get("altPhone"),
            "firstOrderDate": obj.get("firstOrderDate"),
            "faxTransactions": obj.get("faxTransactions"),
            "resaleNumber": obj.get("resaleNumber"),
            "custentity_nxc_customer_account": obj.get("custentity_nxc_customer_account"),
            "altEmail": obj.get("altEmail"),
            "defaultOrderPriority": obj.get("defaultOrderPriority"),
            "custentity_tax_contact_first": obj.get("custentity_tax_contact_first"),
            "salutation": obj.get("salutation"),
            "isInactive": obj.get("isInactive"),
            "firstName": obj.get("firstName"),
            "thirdPartyAcct": obj.get("thirdPartyAcct"),
            "custentity_bb1_cc_lastemail": obj.get("custentity_bb1_cc_lastemail"),
            "homePhone": obj.get("homePhone"),
            "estimatedBudget": obj.get("estimatedBudget"),
            "custentity_bb1_last_statement": obj.get("custentity_bb1_last_statement"),
            "title": obj.get("title"),
            "defaultShippingAddress": obj.get("defaultShippingAddress"),
            "giveAccess": obj.get("giveAccess"),
            "negativeNumberFormat": CustomerNegativeNumberFormat.from_dict(obj["negativeNumberFormat"]) if obj.get("negativeNumberFormat") is not None else None,
            "billingTransactionType": CustomerBillingTransactionType.from_dict(obj["billingTransactionType"]) if obj.get("billingTransactionType") is not None else None,
            "shippingCarrier": CustomerShippingCarrier.from_dict(obj["shippingCarrier"]) if obj.get("shippingCarrier") is not None else None,
            "aging2": obj.get("aging2"),
            "aging3": obj.get("aging3"),
            "aging1": obj.get("aging1"),
            "aging4": obj.get("aging4"),
            "comments": obj.get("comments"),
            "accountNumber": obj.get("accountNumber"),
            "reminderDays": obj.get("reminderDays"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "custentity_bb1_customer_approved": obj.get("custentity_bb1_customer_approved"),
            "middleName": obj.get("middleName"),
            "printTransactions": obj.get("printTransactions"),
            "custentity_bb1_dispute_reason": obj.get("custentity_bb1_dispute_reason"),
            "custentity_link_name_lsa": obj.get("custentity_link_name_lsa"),
            "custentity_bb1_credit_control_checked": obj.get("custentity_bb1_credit_control_checked"),
            "custentity_bb1_cc_pause": obj.get("custentity_bb1_cc_pause"),
            "daysOverdue": obj.get("daysOverdue"),
            "custentity_erpff_p2p_basw_tax_scheme_id": obj.get("custentity_erpff_p2p_basw_tax_scheme_id"),
            "creditLimit": obj.get("creditLimit"),
            "sendEmail": obj.get("sendEmail"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "contactRoles": CustomerContactRolesCollection.from_dict(obj["contactRoles"]) if obj.get("contactRoles") is not None else None,
            "buyingReason": NsResource.from_dict(obj["buyingReason"]) if obj.get("buyingReason") is not None else None,
            "contact": NsResource.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "custentity_tax_contact": NsResource.from_dict(obj["custentity_tax_contact"]) if obj.get("custentity_tax_contact") is not None else None,
            "terms": Term.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "custentity_4601_defaultwitaxcode": NsResource.from_dict(obj["custentity_4601_defaultwitaxcode"]) if obj.get("custentity_4601_defaultwitaxcode") is not None else None,
            "defaultBankAccount": Account.from_dict(obj["defaultBankAccount"]) if obj.get("defaultBankAccount") is not None else None,
            "partner": NsResource.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "custentity_ph4185_bstyle": NsResource.from_dict(obj["custentity_ph4185_bstyle"]) if obj.get("custentity_ph4185_bstyle") is not None else None,
            "receivablesAccount": Account.from_dict(obj["receivablesAccount"]) if obj.get("receivablesAccount") is not None else None,
            "salesReadiness": NsResource.from_dict(obj["salesReadiness"]) if obj.get("salesReadiness") is not None else None,
            "groupPricing": CustomerGroupPricingCollection.from_dict(obj["groupPricing"]) if obj.get("groupPricing") is not None else None,
            "category": NsResource.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "sourceWebSite": NsResource.from_dict(obj["sourceWebSite"]) if obj.get("sourceWebSite") is not None else None,
            "prefCcProcessor": NsResource.from_dict(obj["prefCcProcessor"]) if obj.get("prefCcProcessor") is not None else None,
            "salesRep": NsResource.from_dict(obj["salesRep"]) if obj.get("salesRep") is not None else None,
            "shippingItem": NsResource.from_dict(obj["shippingItem"]) if obj.get("shippingItem") is not None else None,
            "billingSchedule": NsResource.from_dict(obj["billingSchedule"]) if obj.get("billingSchedule") is not None else None,
            "assignedWebSite": NsResource.from_dict(obj["assignedWebSite"]) if obj.get("assignedWebSite") is not None else None,
            "openingBalanceAccount": Account.from_dict(obj["openingBalanceAccount"]) if obj.get("openingBalanceAccount") is not None else None,
            "leadSource": NsResource.from_dict(obj["leadSource"]) if obj.get("leadSource") is not None else None,
            "subsidiary": NsResource.from_dict(obj["subsidiary"]) if obj.get("subsidiary") is not None else None,
            "custentity_ff_sc_entity_ita_pay_term": NsResource.from_dict(obj["custentity_ff_sc_entity_ita_pay_term"]) if obj.get("custentity_ff_sc_entity_ita_pay_term") is not None else None,
            "territory": NsResource.from_dict(obj["territory"]) if obj.get("territory") is not None else None,
            "itemPricing": CustomerItemPricingCollection.from_dict(obj["itemPricing"]) if obj.get("itemPricing") is not None else None,
            "custentity_ff_sc_bank_details": NsResource.from_dict(obj["custentity_ff_sc_bank_details"]) if obj.get("custentity_ff_sc_bank_details") is not None else None,
            "buyingTimeFrame": NsResource.from_dict(obj["buyingTimeFrame"]) if obj.get("buyingTimeFrame") is not None else None,
            "entityStatus": NsResource.from_dict(obj["entityStatus"]) if obj.get("entityStatus") is not None else None,
            "custentity_erpff_p2p_party_endp_scheme": NsResource.from_dict(obj["custentity_erpff_p2p_party_endp_scheme"]) if obj.get("custentity_erpff_p2p_party_endp_scheme") is not None else None,
            "custentity_bb1_market": NsResource.from_dict(obj["custentity_bb1_market"]) if obj.get("custentity_bb1_market") is not None else None,
            "currencyList": CustomerCurrencyListCollection.from_dict(obj["currencyList"]) if obj.get("currencyList") is not None else None,
            "billingRateCard": NsResource.from_dict(obj["billingRateCard"]) if obj.get("billingRateCard") is not None else None,
            "custentity_ff_sc_bank_details_sec": NsResource.from_dict(obj["custentity_ff_sc_bank_details_sec"]) if obj.get("custentity_ff_sc_bank_details_sec") is not None else None,
            "drAccount": Account.from_dict(obj["drAccount"]) if obj.get("drAccount") is not None else None,
            "topLevelParent": Customer.from_dict(obj["topLevelParent"]) if obj.get("topLevelParent") is not None else None,
            "representingSubsidiary": NsResource.from_dict(obj["representingSubsidiary"]) if obj.get("representingSubsidiary") is not None else None,
            "contactList": NsResourceCollection.from_dict(obj["contactList"]) if obj.get("contactList") is not None else None,
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "parent": Customer.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "custentity_erpff_p2p_basw_tax_scheme": NsResource.from_dict(obj["custentity_erpff_p2p_basw_tax_scheme"]) if obj.get("custentity_erpff_p2p_basw_tax_scheme") is not None else None,
            "priceLevel": NsResource.from_dict(obj["priceLevel"]) if obj.get("priceLevel") is not None else None,
            "image": NsResource.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "addressBook": CustomerAddressBookCollection.from_dict(obj["addressBook"]) if obj.get("addressBook") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Customer.model_rebuild(raise_errors=False)

