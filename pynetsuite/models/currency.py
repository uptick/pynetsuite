# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-02 at 01:07:42 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.currency_fx_rate_update_timezone import CurrencyFxRateUpdateTimezone
from pynetsuite.models.currency_locale import CurrencyLocale
from pynetsuite.models.currency_symbol_placement import CurrencySymbolPlacement
from pynetsuite.models.ns_link import NsLink
from typing import Optional, Set
from typing_extensions import Self

class Currency(BaseModel):
    """
    Currency
    """ # noqa: E501
    is_inactive: Optional[StrictBool] = Field(default=None, description="Check this box to make the currency record is inactive, or clear it to make the record active. You cannot make a currency inactive if any open transactions exist in that currency.", alias="isInactive")
    symbol: Optional[StrictStr] = Field(default=None, description="Enter the three-letter International Standards Organization (ISO) code for this currency. For example, you would use PHP for Philippines pesos, UYU for Uruguayan pesos, and MXN for Mexican pesos.")
    is_anchor_currency: Optional[StrictBool] = Field(default=None, description="A check in this box indicates that the currency has been selected as an anchor currency in the accounting preferences. To clear the box, change the selection in the accounting preference under Use Triangulation Calculation by NetSuite. If this currency is a designated anchor currency and has been used in an exchange rate calculation, you cannot delete this currency. For more information about triangulation and anchor currencies, see the help topics Methods for Obtaining Exchange Rates andAnchor Currencies.", alias="isAnchorCurrency")
    include_in_fx_rate_updates: Optional[StrictBool] = Field(default=None, description="Check this box to update currency exchange rates daily.", alias="includeInFxRateUpdates")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter an exchange rate for this currency against the base currency of this company, or if you use OneWorld, for this currency against the base currency of the root parent subsidiary. The exchange rate is equal to the base currency amount divided by the foreign currency amount. For example, if your company is located in Canada (base currency) and you are defining the U.S. dollar (foreign currency), and the current exchange rate is 1.02 Canadian dollars to 1.00 U.S. dollar, the Default Exchange Rate for the U.S. dollar is 1.02/1.00, or 1.02. This rate is the basis for rates in the Currency Exchange Rates table that are used in foreign currency transactions. If you use OneWorld, this rate also is the basis for rates in the Consolidated Exchange Rates table that are used in consolidated financials. For more information, see the help topic Currency Exchange Rates.", alias="exchangeRate")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    is_base_currency: Optional[StrictBool] = Field(default=None, description="Indicates that this currency is the company&apos;s base currency or in OneWorld accounts, the base currency for a subsidiary. Note: After you have entered transactions in foreign currencies, you cannot change a base currency.", alias="isBaseCurrency")
    locale: Optional[CurrencyLocale] = None
    fx_rate_update_timezone: Optional[CurrencyFxRateUpdateTimezone] = Field(default=None, alias="fxRateUpdateTimezone")
    override_currency_format: Optional[StrictBool] = Field(default=None, description="Check this box to customize the currency format.", alias="overrideCurrencyFormat")
    format_sample: Optional[StrictStr] = Field(default=None, description="This field displays a sample of how currency amounts display for the selected format. The decimal precision shown cannot be changed. Note: The decimal precision shown is the precision used for both inventory reporting and for costing calculations.", alias="formatSample")
    currency_precision: Optional[StrictInt] = Field(default=None, description="Displays the precision of the currency, which designates the number of digits to the right of the decimal point used in currency transactions. Precision can be zero or two. The level of decimal precision indicated is used for inventory costing calculations to maintains consistency between inventory costing and reporting. Values in report results are rounded to the base currency precision. This rounding applies to currency values and non-currency values, including formula column values. To change this read-only field to a dropdown list through which you can change the precision from zero or two, contact NetSuite Technical Support.", alias="currencyPrecision")
    name: Optional[StrictStr] = Field(default=None, description="Enter a unique name for the currency. Because many countries use the same name for their currencies, you should use a combined name that includes the country name or abbreviation as well as the name of the currency. For example, pesos are the currency in the Philippines, Uruguay, and Mexico. In the Name field, you might enter “Mexican peso.” This name appears in the Currency field on records and transactions.")
    id: Optional[StrictStr] = None
    symbol_placement: Optional[CurrencySymbolPlacement] = Field(default=None, alias="symbolPlacement")
    display_symbol: Optional[StrictStr] = Field(default=None, description="Enter the currency symbol and text to use for this currency. Include spaces if you want to separate the symbol from the currency value. For example, $ USD or $CAD.", alias="displaySymbol")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    __properties: ClassVar[List[str]] = ["isInactive", "symbol", "isAnchorCurrency", "includeInFxRateUpdates", "lastModifiedDate", "exchangeRate", "externalId", "isBaseCurrency", "locale", "fxRateUpdateTimezone", "overrideCurrencyFormat", "formatSample", "currencyPrecision", "name", "id", "symbolPlacement", "displaySymbol", "refName", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Currency from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of locale
        if self.locale:
            _dict['locale'] = self.locale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fx_rate_update_timezone
        if self.fx_rate_update_timezone:
            _dict['fxRateUpdateTimezone'] = self.fx_rate_update_timezone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of symbol_placement
        if self.symbol_placement:
            _dict['symbolPlacement'] = self.symbol_placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if symbol (nullable) is None
        # and model_fields_set contains the field
        if self.symbol is None and "symbol" in self.model_fields_set:
            _dict['symbol'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if exchange_rate (nullable) is None
        # and model_fields_set contains the field
        if self.exchange_rate is None and "exchange_rate" in self.model_fields_set:
            _dict['exchangeRate'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if format_sample (nullable) is None
        # and model_fields_set contains the field
        if self.format_sample is None and "format_sample" in self.model_fields_set:
            _dict['formatSample'] = None

        # set to None if currency_precision (nullable) is None
        # and model_fields_set contains the field
        if self.currency_precision is None and "currency_precision" in self.model_fields_set:
            _dict['currencyPrecision'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if display_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.display_symbol is None and "display_symbol" in self.model_fields_set:
            _dict['displaySymbol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Currency from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isInactive": obj.get("isInactive"),
            "symbol": obj.get("symbol"),
            "isAnchorCurrency": obj.get("isAnchorCurrency"),
            "includeInFxRateUpdates": obj.get("includeInFxRateUpdates"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "exchangeRate": obj.get("exchangeRate"),
            "externalId": obj.get("externalId"),
            "isBaseCurrency": obj.get("isBaseCurrency"),
            "locale": CurrencyLocale.from_dict(obj["locale"]) if obj.get("locale") is not None else None,
            "fxRateUpdateTimezone": CurrencyFxRateUpdateTimezone.from_dict(obj["fxRateUpdateTimezone"]) if obj.get("fxRateUpdateTimezone") is not None else None,
            "overrideCurrencyFormat": obj.get("overrideCurrencyFormat"),
            "formatSample": obj.get("formatSample"),
            "currencyPrecision": obj.get("currencyPrecision"),
            "name": obj.get("name"),
            "id": obj.get("id"),
            "symbolPlacement": CurrencySymbolPlacement.from_dict(obj["symbolPlacement"]) if obj.get("symbolPlacement") is not None else None,
            "displaySymbol": obj.get("displaySymbol"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


