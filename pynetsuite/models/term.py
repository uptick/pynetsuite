# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-01 at 22:32:31 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.term_date_driven import TermDateDriven
from typing import Optional, Set
from typing_extensions import Self

class Term(BaseModel):
    """
    Term
    """ # noqa: E501
    is_inactive: Optional[StrictBool] = Field(default=None, description="Check this box to remove all references to this record from your account. You can reactivate the record at any time.", alias="isInactive")
    discount_percent_date_driven: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For date driven terms, enter the percentage discount if the invoice is paid early.", alias="discountPercentDateDriven")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    tname: Optional[StrictStr] = None
    discount_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="For standard terms, enter the percentage discount if the invoice is paid early.", alias="discountPercent")
    date_driven: Optional[TermDateDriven] = Field(default=None, alias="dateDriven")
    due_next_month_if_within_days: Optional[StrictInt] = Field(default=None, description="For date driven terms, enter the number of days before the due date that the invoice can be postponed until the next month&apos;s due date. For example, if invoices are due on the 30th of each month and you enter 5 in this field, then invoices issued between the 25th and 30th are due for payment by the 30th of the following month. For another example, Day of Month Net Due = 15 and Due Next Month if Within Days = 30 Date range within 30 days: 5/16-6/14 move to 7/15 6/15-7/15 move to 8/15 8/16-9/14 move to 10/15 9/15-10/15 move to 11/15 10/16-11/14 move to 12/15 11/15-12/15 move to 1/5", alias="dueNextMonthIfWithinDays")
    days_until_expiry: Optional[StrictInt] = Field(default=None, description="For standard terms, enter the number of days the early payment discount is available. For example, if the early payment discount is available for 15 days after the bill is issued, enter 15 in this field.", alias="daysUntilExpiry")
    day_of_month_net_due: Optional[StrictInt] = Field(default=None, description="For date driven terms, enter the day of the month when the net amount of the invoice is due. If you enter a date that does not exist in the month the transaction is due, the last day of the month becomes the due date.", alias="dayOfMonthNetDue")
    name: Optional[StrictStr] = Field(default=None, description="Enter the name for this record. This name appears in lists that include this record.")
    days_until_net_due: Optional[StrictInt] = Field(default=None, description="Enter the number of days until the net amount of the bill becomes due. For example, if you are creating a term of Net 30, enter 30 in this field.", alias="daysUntilNetDue")
    longitemtype: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    preferred: Optional[StrictBool] = Field(default=None, description="Check this box to make this term or message show by default on sales transactions you create. Note: Terms set on customer records override terms marked as preferred.")
    day_discount_expires: Optional[StrictInt] = Field(default=None, description="If you offer a discount for early payment under date driven terms, enter the last day of the month the early payment discount is available. For example, if the early payment discount is available through the 20th of each month, enter 20 in this field.", alias="dayDiscountExpires")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    __properties: ClassVar[List[str]] = ["isInactive", "discountPercentDateDriven", "lastModifiedDate", "externalId", "tname", "discountPercent", "dateDriven", "dueNextMonthIfWithinDays", "daysUntilExpiry", "dayOfMonthNetDue", "name", "daysUntilNetDue", "longitemtype", "id", "preferred", "dayDiscountExpires", "refName", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Term from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_driven
        if self.date_driven:
            _dict['dateDriven'] = self.date_driven.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if discount_percent_date_driven (nullable) is None
        # and model_fields_set contains the field
        if self.discount_percent_date_driven is None and "discount_percent_date_driven" in self.model_fields_set:
            _dict['discountPercentDateDriven'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if tname (nullable) is None
        # and model_fields_set contains the field
        if self.tname is None and "tname" in self.model_fields_set:
            _dict['tname'] = None

        # set to None if discount_percent (nullable) is None
        # and model_fields_set contains the field
        if self.discount_percent is None and "discount_percent" in self.model_fields_set:
            _dict['discountPercent'] = None

        # set to None if due_next_month_if_within_days (nullable) is None
        # and model_fields_set contains the field
        if self.due_next_month_if_within_days is None and "due_next_month_if_within_days" in self.model_fields_set:
            _dict['dueNextMonthIfWithinDays'] = None

        # set to None if days_until_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.days_until_expiry is None and "days_until_expiry" in self.model_fields_set:
            _dict['daysUntilExpiry'] = None

        # set to None if day_of_month_net_due (nullable) is None
        # and model_fields_set contains the field
        if self.day_of_month_net_due is None and "day_of_month_net_due" in self.model_fields_set:
            _dict['dayOfMonthNetDue'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if days_until_net_due (nullable) is None
        # and model_fields_set contains the field
        if self.days_until_net_due is None and "days_until_net_due" in self.model_fields_set:
            _dict['daysUntilNetDue'] = None

        # set to None if longitemtype (nullable) is None
        # and model_fields_set contains the field
        if self.longitemtype is None and "longitemtype" in self.model_fields_set:
            _dict['longitemtype'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if day_discount_expires (nullable) is None
        # and model_fields_set contains the field
        if self.day_discount_expires is None and "day_discount_expires" in self.model_fields_set:
            _dict['dayDiscountExpires'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Term from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isInactive": obj.get("isInactive"),
            "discountPercentDateDriven": obj.get("discountPercentDateDriven"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "externalId": obj.get("externalId"),
            "tname": obj.get("tname"),
            "discountPercent": obj.get("discountPercent"),
            "dateDriven": TermDateDriven.from_dict(obj["dateDriven"]) if obj.get("dateDriven") is not None else None,
            "dueNextMonthIfWithinDays": obj.get("dueNextMonthIfWithinDays"),
            "daysUntilExpiry": obj.get("daysUntilExpiry"),
            "dayOfMonthNetDue": obj.get("dayOfMonthNetDue"),
            "name": obj.get("name"),
            "daysUntilNetDue": obj.get("daysUntilNetDue"),
            "longitemtype": obj.get("longitemtype"),
            "id": obj.get("id"),
            "preferred": obj.get("preferred"),
            "dayDiscountExpires": obj.get("dayDiscountExpires"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


