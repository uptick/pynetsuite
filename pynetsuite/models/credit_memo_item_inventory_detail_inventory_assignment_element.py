# coding: utf-8

"""
    NetSuite REST Record API

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from typing import Optional, Set
from typing_extensions import Self

class CreditMemoItemInventoryDetailInventoryAssignmentElement(BaseModel):
    """
    CreditMemoItemInventoryDetailInventoryAssignmentElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    pack_carton: Optional[StrictStr] = Field(default=None, alias="packCarton")
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    expiration_date: Optional[date] = Field(default=None, alias="expirationDate")
    inventory_detail: Optional[StrictInt] = Field(default=None, alias="inventoryDetail")
    receipt_inventory_number: Optional[StrictStr] = Field(default=None, alias="receiptInventoryNumber")
    internal_id: Optional[StrictInt] = Field(default=None, alias="internalId")
    quantity_available: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantityAvailable")
    pick_carton: Optional[StrictStr] = Field(default=None, alias="pickCarton")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    inventory_status: Optional[NsResource] = Field(default=None, alias="inventoryStatus")
    to_bin_number: Optional[NsResource] = Field(default=None, alias="toBinNumber")
    to_inventory_status: Optional[NsResource] = Field(default=None, alias="toInventoryStatus")
    bin_number: Optional[NsResource] = Field(default=None, alias="binNumber")
    issue_inventory_number: Optional[NsResource] = Field(default=None, alias="issueInventoryNumber")
    __properties: ClassVar[List[str]] = ["links", "packCarton", "quantity", "expirationDate", "inventoryDetail", "receiptInventoryNumber", "internalId", "quantityAvailable", "pickCarton", "refName", "inventoryStatus", "toBinNumber", "toInventoryStatus", "binNumber", "issueInventoryNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditMemoItemInventoryDetailInventoryAssignmentElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of inventory_status
        if self.inventory_status:
            _dict['inventoryStatus'] = self.inventory_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_bin_number
        if self.to_bin_number:
            _dict['toBinNumber'] = self.to_bin_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_inventory_status
        if self.to_inventory_status:
            _dict['toInventoryStatus'] = self.to_inventory_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bin_number
        if self.bin_number:
            _dict['binNumber'] = self.bin_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issue_inventory_number
        if self.issue_inventory_number:
            _dict['issueInventoryNumber'] = self.issue_inventory_number.to_dict()
        # set to None if pack_carton (nullable) is None
        # and model_fields_set contains the field
        if self.pack_carton is None and "pack_carton" in self.model_fields_set:
            _dict['packCarton'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        # set to None if inventory_detail (nullable) is None
        # and model_fields_set contains the field
        if self.inventory_detail is None and "inventory_detail" in self.model_fields_set:
            _dict['inventoryDetail'] = None

        # set to None if receipt_inventory_number (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_inventory_number is None and "receipt_inventory_number" in self.model_fields_set:
            _dict['receiptInventoryNumber'] = None

        # set to None if internal_id (nullable) is None
        # and model_fields_set contains the field
        if self.internal_id is None and "internal_id" in self.model_fields_set:
            _dict['internalId'] = None

        # set to None if quantity_available (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_available is None and "quantity_available" in self.model_fields_set:
            _dict['quantityAvailable'] = None

        # set to None if pick_carton (nullable) is None
        # and model_fields_set contains the field
        if self.pick_carton is None and "pick_carton" in self.model_fields_set:
            _dict['pickCarton'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditMemoItemInventoryDetailInventoryAssignmentElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "packCarton": obj.get("packCarton"),
            "quantity": obj.get("quantity"),
            "expirationDate": obj.get("expirationDate"),
            "inventoryDetail": obj.get("inventoryDetail"),
            "receiptInventoryNumber": obj.get("receiptInventoryNumber"),
            "internalId": obj.get("internalId"),
            "quantityAvailable": obj.get("quantityAvailable"),
            "pickCarton": obj.get("pickCarton"),
            "refName": obj.get("refName"),
            "inventoryStatus": NsResource.from_dict(obj["inventoryStatus"]) if obj.get("inventoryStatus") is not None else None,
            "toBinNumber": NsResource.from_dict(obj["toBinNumber"]) if obj.get("toBinNumber") is not None else None,
            "toInventoryStatus": NsResource.from_dict(obj["toInventoryStatus"]) if obj.get("toInventoryStatus") is not None else None,
            "binNumber": NsResource.from_dict(obj["binNumber"]) if obj.get("binNumber") is not None else None,
            "issueInventoryNumber": NsResource.from_dict(obj["issueInventoryNumber"]) if obj.get("issueInventoryNumber") is not None else None
        })
        return _obj


