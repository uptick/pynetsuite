# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-01 at 22:32:31 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.account_account_context_search_collection import AccountAccountContextSearchCollection
from pynetsuite.models.account_acct_type import AccountAcctType
from pynetsuite.models.account_general_rate import AccountGeneralRate
from pynetsuite.models.account_localizations_collection import AccountLocalizationsCollection
from pynetsuite.models.account_s_spec_acct import AccountSSpecAcct
from pynetsuite.models.currency import Currency
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from pynetsuite.models.ns_resource_collection import NsResourceCollection
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    is_inactive: Optional[StrictBool] = Field(default=None, description="Check this box to inactivate this account. Inactive accounts do not show in lists on transactions and records.", alias="isInactive")
    is_summary: Optional[StrictBool] = Field(default=None, description="Check this box to make this account record solely for reporting purposes. Summary accounts are useful when you want to create a non-posting, inactive parent account that has active child accounts. If you do not have a OneWorld account, new summary accounts cannot have an opening balance, but you can convert an existing account with a transaction balance into a summary account. In this case, you cannot post additional transactions to the account. Summary accounts appear with their children in the chart of accounts list. You cannot merge a summary account into another account.", alias="isSummary")
    s_bank_name: Optional[StrictStr] = Field(default=None, description="Enter the name of your bank.", alias="sBankName")
    opening_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter an opening balance for this account.", alias="openingBalance")
    tran_date: Optional[date] = Field(default=None, description="Enter the date of the opening balance of this account.", alias="tranDate")
    external_id: Optional[StrictStr] = Field(default=None, description="Returns the account&apos;s external ID, if one is assigned.", alias="externalId")
    s_bank_routing_number: Optional[StrictStr] = Field(default=None, description="Enter the 9-digit routing number for this bank account.", alias="sBankRoutingNumber")
    description: Optional[StrictStr] = Field(default=None, description="Enter a description for this account. You can enter up to 255 alphanumeric characters.")
    eliminate: Optional[StrictBool] = Field(default=None, description="Check this box to make this account an intercompany account. Intercompany accounts are used to record transactions between subsidiaries. You can post both intercompany transactions and non-intercompany transactions to most intercompany accounts. Intercompany Accounts Receivable and Intercompany Accounts Payable, however, can be used only for recording amounts that are candidates for eliminations. For details, see the help topic Intercompany Accounts.")
    inventory: Optional[StrictBool] = Field(default=None, description="If this will be an Other Current Asset account and you want the balance of this account included in the total balance of the Inventory KPI, select the Inventory box.")
    custrecord_ff_sc_acc_srvc_for_taxation: Optional[StrictBool] = None
    revalue: Optional[StrictBool] = Field(default=None, description="Check this box to select this account for open balance currency revaluation.")
    s_bank_company_id: Optional[StrictStr] = Field(default=None, description="Enter the bank account number, up to 20 digits.", alias="sBankCompanyId")
    acct_number: Optional[StrictStr] = Field(default=None, description="Enter the number to identify this account. The number can be alphanumeric. The maximum number of characters is 60.", alias="acctNumber")
    cur_doc_num: Optional[StrictInt] = Field(default=None, description="Enter a number to reset the default check number that appears on transactions such as checks and bill payments. By default, this field shows the highest check number in the account plus one. The number you enter in the Next Check Number field of the account record determines the number that appears in the Check Number field on transactions linked to that account.", alias="curDocNum")
    s_spec_acct: Optional[AccountSSpecAcct] = Field(default=None, alias="sSpecAcct")
    id: Optional[StrictStr] = Field(default=None, description="Returns the account&apos;s internal ID.")
    account_search_display_name_copy: Optional[StrictStr] = Field(default=None, description="Returns the account number and name, as it appears in searches.", alias="accountSearchDisplayNameCopy")
    last_modified_date: Optional[datetime] = Field(default=None, description="Returns the date on which the account record was last modified.", alias="lastModifiedDate")
    general_rate: Optional[AccountGeneralRate] = Field(default=None, alias="generalRate")
    cash_flow_rate: Optional[AccountGeneralRate] = Field(default=None, alias="cashFlowRate")
    acct_type: Optional[AccountAcctType] = Field(default=None, alias="acctType")
    include_children: Optional[StrictBool] = Field(default=None, description="Check the Include Children box to share the account with all the sub-subsidiaries associated with each subsidiary selected in the Subsidiary field.", alias="includeChildren")
    account_search_display_name: Optional[StrictStr] = Field(default=None, description="Returns the account number and name, as it appears in searches. The returned name is a link to the account record.", alias="accountSearchDisplayName")
    unit: Optional[StrictStr] = Field(default=None, description="This field displays the base unit assigned to the Unit Type. The default unit cannot be changed.")
    display_name_with_hierarchy: Optional[StrictStr] = Field(default=None, description="Returns the display name of the account in order of hierarchy. Accounts are returned grouped. If you have three statistical accounts, 1002 Conference Room Square Footage appears before 1003 Collaboration Space Square Footage. And that account appears before 1004 Development Staff.", alias="displayNameWithHierarchy")
    reconcile_with_matching: Optional[StrictBool] = Field(default=None, description="Check this box if you want to use the Match Bank Data and Reconcile Account Statement pages for this account. The original reconciliation pages are no longer supported but are still available. To use the original pages, clear the box.", alias="reconcileWithMatching")
    full_name: Optional[StrictStr] = Field(default=None, description="Returns the name of the account, but does not include the account number.", alias="fullName")
    acct_name: Optional[StrictStr] = Field(default=None, description="Enter up to 31 characters for an account name that will appear on all reports. If you want to use GL account numbers and do not see a Number field above the Name field, go to Setup &gt; Accounting &gt; Preferences &gt; Accounting Preferences, and check the Use Account Numbers box. Save the preference, and return to this page.", alias="acctName")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    subsidiary: Optional[NsResourceCollection] = None
    deferral_acct: Optional[Account] = Field(default=None, alias="deferralAcct")
    location: Optional[NsResource] = None
    billable_expenses_acct: Optional[Account] = Field(default=None, alias="billableExpensesAcct")
    department: Optional[NsResource] = None
    units_type: Optional[NsResource] = Field(default=None, alias="unitsType")
    currency: Optional[Currency] = None
    var_class: Optional[NsResource] = Field(default=None, alias="class")
    account_context_search: Optional[AccountAccountContextSearchCollection] = Field(default=None, alias="accountContextSearch")
    localizations: Optional[AccountLocalizationsCollection] = None
    category1099_misc: Optional[NsResource] = Field(default=None, alias="category1099Misc")
    parent: Optional[Account] = None
    __properties: ClassVar[List[str]] = ["isInactive", "isSummary", "sBankName", "openingBalance", "tranDate", "externalId", "sBankRoutingNumber", "description", "eliminate", "inventory", "custrecord_ff_sc_acc_srvc_for_taxation", "revalue", "sBankCompanyId", "acctNumber", "curDocNum", "sSpecAcct", "id", "accountSearchDisplayNameCopy", "lastModifiedDate", "generalRate", "cashFlowRate", "acctType", "includeChildren", "accountSearchDisplayName", "unit", "displayNameWithHierarchy", "reconcileWithMatching", "fullName", "acctName", "refName", "links", "subsidiary", "deferralAcct", "location", "billableExpensesAcct", "department", "unitsType", "currency", "class", "accountContextSearch", "localizations", "category1099Misc", "parent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of s_spec_acct
        if self.s_spec_acct:
            _dict['sSpecAcct'] = self.s_spec_acct.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general_rate
        if self.general_rate:
            _dict['generalRate'] = self.general_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cash_flow_rate
        if self.cash_flow_rate:
            _dict['cashFlowRate'] = self.cash_flow_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of acct_type
        if self.acct_type:
            _dict['acctType'] = self.acct_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of subsidiary
        if self.subsidiary:
            _dict['subsidiary'] = self.subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deferral_acct
        if self.deferral_acct:
            _dict['deferralAcct'] = self.deferral_acct.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billable_expenses_acct
        if self.billable_expenses_acct:
            _dict['billableExpensesAcct'] = self.billable_expenses_acct.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of units_type
        if self.units_type:
            _dict['unitsType'] = self.units_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_class
        if self.var_class:
            _dict['class'] = self.var_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_context_search
        if self.account_context_search:
            _dict['accountContextSearch'] = self.account_context_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of localizations
        if self.localizations:
            _dict['localizations'] = self.localizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category1099_misc
        if self.category1099_misc:
            _dict['category1099Misc'] = self.category1099_misc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # set to None if s_bank_name (nullable) is None
        # and model_fields_set contains the field
        if self.s_bank_name is None and "s_bank_name" in self.model_fields_set:
            _dict['sBankName'] = None

        # set to None if opening_balance (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance is None and "opening_balance" in self.model_fields_set:
            _dict['openingBalance'] = None

        # set to None if tran_date (nullable) is None
        # and model_fields_set contains the field
        if self.tran_date is None and "tran_date" in self.model_fields_set:
            _dict['tranDate'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if s_bank_routing_number (nullable) is None
        # and model_fields_set contains the field
        if self.s_bank_routing_number is None and "s_bank_routing_number" in self.model_fields_set:
            _dict['sBankRoutingNumber'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if s_bank_company_id (nullable) is None
        # and model_fields_set contains the field
        if self.s_bank_company_id is None and "s_bank_company_id" in self.model_fields_set:
            _dict['sBankCompanyId'] = None

        # set to None if acct_number (nullable) is None
        # and model_fields_set contains the field
        if self.acct_number is None and "acct_number" in self.model_fields_set:
            _dict['acctNumber'] = None

        # set to None if cur_doc_num (nullable) is None
        # and model_fields_set contains the field
        if self.cur_doc_num is None and "cur_doc_num" in self.model_fields_set:
            _dict['curDocNum'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if account_search_display_name_copy (nullable) is None
        # and model_fields_set contains the field
        if self.account_search_display_name_copy is None and "account_search_display_name_copy" in self.model_fields_set:
            _dict['accountSearchDisplayNameCopy'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if account_search_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.account_search_display_name is None and "account_search_display_name" in self.model_fields_set:
            _dict['accountSearchDisplayName'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if display_name_with_hierarchy (nullable) is None
        # and model_fields_set contains the field
        if self.display_name_with_hierarchy is None and "display_name_with_hierarchy" in self.model_fields_set:
            _dict['displayNameWithHierarchy'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if acct_name (nullable) is None
        # and model_fields_set contains the field
        if self.acct_name is None and "acct_name" in self.model_fields_set:
            _dict['acctName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isInactive": obj.get("isInactive"),
            "isSummary": obj.get("isSummary"),
            "sBankName": obj.get("sBankName"),
            "openingBalance": obj.get("openingBalance"),
            "tranDate": obj.get("tranDate"),
            "externalId": obj.get("externalId"),
            "sBankRoutingNumber": obj.get("sBankRoutingNumber"),
            "description": obj.get("description"),
            "eliminate": obj.get("eliminate"),
            "inventory": obj.get("inventory"),
            "custrecord_ff_sc_acc_srvc_for_taxation": obj.get("custrecord_ff_sc_acc_srvc_for_taxation"),
            "revalue": obj.get("revalue"),
            "sBankCompanyId": obj.get("sBankCompanyId"),
            "acctNumber": obj.get("acctNumber"),
            "curDocNum": obj.get("curDocNum"),
            "sSpecAcct": AccountSSpecAcct.from_dict(obj["sSpecAcct"]) if obj.get("sSpecAcct") is not None else None,
            "id": obj.get("id"),
            "accountSearchDisplayNameCopy": obj.get("accountSearchDisplayNameCopy"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "generalRate": AccountGeneralRate.from_dict(obj["generalRate"]) if obj.get("generalRate") is not None else None,
            "cashFlowRate": AccountGeneralRate.from_dict(obj["cashFlowRate"]) if obj.get("cashFlowRate") is not None else None,
            "acctType": AccountAcctType.from_dict(obj["acctType"]) if obj.get("acctType") is not None else None,
            "includeChildren": obj.get("includeChildren"),
            "accountSearchDisplayName": obj.get("accountSearchDisplayName"),
            "unit": obj.get("unit"),
            "displayNameWithHierarchy": obj.get("displayNameWithHierarchy"),
            "reconcileWithMatching": obj.get("reconcileWithMatching"),
            "fullName": obj.get("fullName"),
            "acctName": obj.get("acctName"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "subsidiary": NsResourceCollection.from_dict(obj["subsidiary"]) if obj.get("subsidiary") is not None else None,
            "deferralAcct": Account.from_dict(obj["deferralAcct"]) if obj.get("deferralAcct") is not None else None,
            "location": NsResource.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "billableExpensesAcct": Account.from_dict(obj["billableExpensesAcct"]) if obj.get("billableExpensesAcct") is not None else None,
            "department": NsResource.from_dict(obj["department"]) if obj.get("department") is not None else None,
            "unitsType": NsResource.from_dict(obj["unitsType"]) if obj.get("unitsType") is not None else None,
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "class": NsResource.from_dict(obj["class"]) if obj.get("class") is not None else None,
            "accountContextSearch": AccountAccountContextSearchCollection.from_dict(obj["accountContextSearch"]) if obj.get("accountContextSearch") is not None else None,
            "localizations": AccountLocalizationsCollection.from_dict(obj["localizations"]) if obj.get("localizations") is not None else None,
            "category1099Misc": NsResource.from_dict(obj["category1099Misc"]) if obj.get("category1099Misc") is not None else None,
            "parent": Account.from_dict(obj["parent"]) if obj.get("parent") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Account.model_rebuild(raise_errors=False)

