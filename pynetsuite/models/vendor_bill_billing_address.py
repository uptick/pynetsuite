# coding: utf-8

"""
    NetSuite REST Record API

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynetsuite.models.invoice_billing_address_country import InvoiceBillingAddressCountry
from pynetsuite.models.ns_link import NsLink
from typing import Optional, Set
from typing_extensions import Self

class VendorBillBillingAddress(BaseModel):
    """
    VendorBillBillingAddress
    """ # noqa: E501
    zip: Optional[StrictStr] = Field(default=None, description="Enter the postal code the way it should appear on all forms except checks.")
    country: Optional[InvoiceBillingAddressCountry] = None
    addr2: Optional[StrictStr] = Field(default=None, description="Enter an optional second address line the way it should appear on forms. For employees, customers, partners, and vendors, what you enter here autofills on forms if this address is marked default for Shipping or Billing. Enter up to 50 characters.")
    city: Optional[StrictStr] = Field(default=None, description="Enter the city the way it should appear on all forms except checks.")
    addr1: Optional[StrictStr] = Field(default=None, description="Enter the address the way it should appear on forms. For employees, customers, partners, and vendors, what you enter here autofills on forms if this address is marked default for Shipping or Billing. Enter up to 50 characters. This field is required for the Online Bill Pay feature.")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    addr3: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    addr_phone: Optional[StrictStr] = Field(default=None, description="Enter the phone number.", alias="addrPhone")
    addressee: Optional[StrictStr] = Field(default=None, description="Enter the name of the entity that should appear on the shipping label here. This name appears on the shipping label below what you enter in the Attention field.")
    attention: Optional[StrictStr] = Field(default=None, description="Enter the name of the person to whom a shipment is addressed, as it should appear on shipping labels. This field is required for UPS Integration.")
    override: Optional[StrictBool] = Field(default=None, description="Check this box to disable the free-form address text field. When this field is disabled, text entered in the other address fields does not display in the Address text field. Clear this box to allow text entered in the address component fields to appear in the free-form address text field.")
    state: Optional[StrictStr] = Field(default=None, description="Enter your company&apos;s state or province the way it should appear on all forms except checks.")
    addr_text: Optional[StrictStr] = Field(default=None, description="The values entered in the other address fields are displayed here.", alias="addrText")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    __properties: ClassVar[List[str]] = ["zip", "country", "addr2", "city", "addr1", "lastModifiedDate", "addr3", "externalId", "addrPhone", "addressee", "attention", "override", "state", "addrText", "refName", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VendorBillBillingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['zip'] = None

        # set to None if addr2 (nullable) is None
        # and model_fields_set contains the field
        if self.addr2 is None and "addr2" in self.model_fields_set:
            _dict['addr2'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if addr1 (nullable) is None
        # and model_fields_set contains the field
        if self.addr1 is None and "addr1" in self.model_fields_set:
            _dict['addr1'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if addr3 (nullable) is None
        # and model_fields_set contains the field
        if self.addr3 is None and "addr3" in self.model_fields_set:
            _dict['addr3'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if addr_phone (nullable) is None
        # and model_fields_set contains the field
        if self.addr_phone is None and "addr_phone" in self.model_fields_set:
            _dict['addrPhone'] = None

        # set to None if addressee (nullable) is None
        # and model_fields_set contains the field
        if self.addressee is None and "addressee" in self.model_fields_set:
            _dict['addressee'] = None

        # set to None if attention (nullable) is None
        # and model_fields_set contains the field
        if self.attention is None and "attention" in self.model_fields_set:
            _dict['attention'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if addr_text (nullable) is None
        # and model_fields_set contains the field
        if self.addr_text is None and "addr_text" in self.model_fields_set:
            _dict['addrText'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VendorBillBillingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "zip": obj.get("zip"),
            "country": InvoiceBillingAddressCountry.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "addr2": obj.get("addr2"),
            "city": obj.get("city"),
            "addr1": obj.get("addr1"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "addr3": obj.get("addr3"),
            "externalId": obj.get("externalId"),
            "addrPhone": obj.get("addrPhone"),
            "addressee": obj.get("addressee"),
            "attention": obj.get("attention"),
            "override": obj.get("override"),
            "state": obj.get("state"),
            "addrText": obj.get("addrText"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None
        })
        return _obj


