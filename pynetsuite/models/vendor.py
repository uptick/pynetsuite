# coding: utf-8

"""
    NetSuite REST Record API

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from pynetsuite.models.ns_resource_collection import NsResourceCollection
from pynetsuite.models.vendor_address_book_collection import VendorAddressBookCollection
from pynetsuite.models.vendor_currency_list_collection import VendorCurrencyListCollection
from pynetsuite.models.vendor_custom_form import VendorCustomForm
from pynetsuite.models.vendor_email_preference import VendorEmailPreference
from pynetsuite.models.vendor_rates_collection import VendorRatesCollection
from pynetsuite.models.vendor_roles_collection import VendorRolesCollection
from typing import Optional, Set
from typing_extensions import Self

class Vendor(BaseModel):
    """
    Vendor
    """ # noqa: E501
    is_job_resource_vend: Optional[StrictBool] = Field(default=None, description="Check this box to enable this vendor to be chosen as a resource on tasks and jobs. As a job resource, a vendor can be assigned to complete a task or to manage a project. Clear this box if you do not want this vendor assigned as a job resource. Note: If you use NetSuite OneWorld, you cannot share a vendor with multiple subsidiaries and define the vendor as a resource on tasks and jobs.", alias="isJobResourceVend")
    custentity_erpff_p2p_party_endpoint_id: Optional[StrictStr] = None
    custentity_bb1_cis_cisenabled: Optional[StrictBool] = None
    custentity_bb1_cis_ni_ref: Optional[StrictStr] = None
    email_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this vendor. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the vendor on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this vendor is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this vendor is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this vendor is selected. Once you enter these settings on the vendor record, these boxes are checked by default for transactions created from the vendor record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new vendor records at Setup &gt; Company &gt; Printing, Fax and Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Vendors Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Update &gt; Mass Updates &gt; General and click Vendor.", alias="emailTransactions")
    custentity_zc_3wm_exclude_from_3wm: Optional[StrictBool] = None
    password: Optional[StrictStr] = Field(default=None, description="Assign a password to give this vendor access to NetSuite. The Password Criteria panel will help you ensure you create a password that meets the password policy in effect in your account. You will need to tell the user the password you assign. For more information, see the help topic NetSuite Password Requirements.")
    custentity_vl_team_size: Optional[Union[StrictFloat, StrictInt]] = None
    custentity_ff_sc_iban: Optional[StrictStr] = None
    custentity_zc_qty_tlrnce_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The vendor&apos;s current accounts payable balance due appears here.")
    custentity_zc_amt_tlrnce_amount: Optional[Union[StrictFloat, StrictInt]] = None
    print_on_check_as: Optional[StrictStr] = Field(default=None, description="What you enter here prints on the Pay to the Order of line of a check instead of what you entered in the Vendor field.", alias="printOnCheckAs")
    custentity_eff_nsp2p_lastrec_vatnumber: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    fax: Optional[StrictStr] = Field(default=None, description="Enter a fax number for this record. You should enter the fax number exactly as it must be dialed. If a &apos;1&apos; is required to fax to this number, be sure to include it at the beginning of the number. The number you enter here automatically appears in the To Be Faxed field of transactions when you select this customer. To fax NetSuite forms, an administrator must first set up fax service at Setup &gt; Company &gt; Printing, Fax and Email Preferences.")
    custentity_eff_nsp2p_currency_code: Optional[StrictStr] = None
    custentity_ff_sc_ent_diff_pref_cust_id: Optional[StrictStr] = None
    unbilled_orders_primary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This field displays the total amount of orders that have been entered but not yet billed in the specified currency.", alias="unbilledOrdersPrimary")
    custentity_erpff_p2p_party_endp_sch_id: Optional[StrictStr] = None
    custentity_vl_emergency_contact_person: Optional[StrictStr] = None
    custentity_zc_rate_tlrnce_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    date_created: Optional[datetime] = Field(default=None, description="The date this record was created displays here.", alias="dateCreated")
    last_name: Optional[StrictStr] = Field(default=None, description="Optionally enter a last name here.", alias="lastName")
    receipt_quantity_diff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the difference limit for the discrepancy between the quantity on the vendor bill and item receipt.", alias="receiptQuantityDiff")
    phone: Optional[StrictStr] = Field(default=None, description="Enter a phone number for your vendor. It will appear on the Vendor List report. This field is required for the Online Bill Pay feature.")
    require_pwd_change: Optional[StrictBool] = Field(default=None, description="Check this box to require this user to change their password on their next login to NetSuite. When the user next logs in, they see the Change Password page and cannot access other NetSuite pages until a new password is created and saved. Requiring this action protects your account from unauthorized access using generic passwords and prepares your account for an audit. The Require Password Change on Next Login box never displays as checked. When you check this box and save the record, an internal flag is set. When the password change occurs, the flag is cleared. If you later check the box again and save the record, the internal flag is reset to require another password change.", alias="requirePwdChange")
    company_name: Optional[StrictStr] = Field(default=None, description="In the Company name field, enter the supplier&apos;s legal name. If you use Auto-Generated Numbering, you should enter the vendor name here to ensure that it appears along with the code in lists.", alias="companyName")
    custentitypayeeaccountaddress: Optional[StrictStr] = None
    custentity_eff_nsp2p_lastrec_iban: Optional[StrictStr] = None
    custentity_vl_public_liability_expiry: Optional[date] = None
    custentity_erpff_p2p_party_endp_op_id: Optional[StrictStr] = None
    custentity_ff_sc_entity_ita_apy_code: Optional[StrictStr] = None
    default_address: Optional[StrictStr] = Field(default=None, description="This field automatically shows the default billing address that you enter and add using the Address subtab.", alias="defaultAddress")
    opening_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the opening balance of your account with this vendor.", alias="openingBalance")
    custentity_rss_website: Optional[StrictStr] = None
    custentity_vl_capacity_install_per_month: Optional[Union[StrictFloat, StrictInt]] = None
    custentity_vl_trading_postcode: Optional[StrictStr] = None
    custentity_bb1_cis_worksref: Optional[StrictStr] = None
    is_person: Optional[StrictBool] = Field(default=None, description="Next to Type, select to identify the supplier as a Company or Individual.", alias="isPerson")
    custentity_zc_amt_tlrnce_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    password2: Optional[StrictStr] = Field(default=None, description="Reenter the password in this field to verify that you entered the same password twice.")
    custentity_zc_disable_ai_fld_pop: Optional[StrictBool] = None
    email: Optional[StrictStr] = Field(default=None, description="Enter the e-mail address of your vendor. If you allow your vendors online access, this becomes part of their access code.")
    opening_balance_date: Optional[date] = Field(default=None, description="Enter the date of the balance entered in the Opening Balance field", alias="openingBalanceDate")
    custentity_tax_contact_last: Optional[StrictStr] = None
    custentity_nx_labor_cost: Optional[Union[StrictFloat, StrictInt]] = None
    custentity_vl_employers_liability_expiry: Optional[date] = None
    custentity_ff_sc_bank_code: Optional[StrictStr] = None
    url: Optional[StrictStr] = Field(default=None, description="Enter a URL for this vendor&apos;s Web address. When you return to this record for viewing, this address is a link.")
    custentity_vl_registered_address: Optional[StrictStr] = None
    custom_form: Optional[VendorCustomForm] = Field(default=None, alias="customForm")
    custentity_vl_site_allocation: Optional[StrictStr] = None
    auto_name: Optional[StrictBool] = Field(default=None, description="Clear this box to manually enter a name for this record. If you leave this box marked, NetSuite assigns a name or number for this record based on your settings at Setup &gt; Company &gt; Auto-Generated Numbers.", alias="autoName")
    custentity_eff_nsp2p_lastrec_compname: Optional[StrictStr] = None
    custentitypayeeaccountname: Optional[StrictStr] = None
    custentity_ff_sc_dis_lin_rec: Optional[StrictBool] = None
    custentity_tax_contact_middle: Optional[StrictStr] = None
    custentity_eff_nsp2p_einvoice_number: Optional[StrictStr] = None
    custentity_vl_trading_address: Optional[StrictStr] = None
    custentitypayeesortcode: Optional[StrictStr] = None
    custentity_vl_profl_indemnity_expiry: Optional[date] = None
    external_id: Optional[StrictStr] = Field(default=None, description="Returns the vendor&apos;s external ID, if one is assigned.", alias="externalId")
    custentity_erpff_p2p_basw_tax_id: Optional[StrictStr] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Enter your vendor&apos;s name here the way it should appear in all lists. If you use Auto-Generated Numbering, this field fills with the vendor number or code.", alias="entityId")
    email_preference: Optional[VendorEmailPreference] = Field(default=None, alias="emailPreference")
    subsidiary_edition: Optional[StrictStr] = Field(default=None, alias="subsidiaryEdition")
    custentity_ff_sc_clickdata: Optional[StrictStr] = None
    custentity_bb1_missingrecord: Optional[StrictBool] = None
    purchase_order_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the tolerance limit for the discrepancy between the amount on the vendor bill and purchase order.", alias="purchaseOrderAmount")
    is_autogenerated_representing_entity: Optional[StrictBool] = Field(default=None, description="This field indicates that this entity was automatically generated by NetSuite to represent a specific subsidiary.", alias="isAutogeneratedRepresentingEntity")
    receipt_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the tolerance limit for the discrepancy between the quantity on the vendor bill and item receipt.", alias="receiptQuantity")
    custentity_zc_rate_tlrnce_amount: Optional[Union[StrictFloat, StrictInt]] = None
    custentity_bb1_cis_hmrc_verification: Optional[StrictStr] = None
    mobile_phone: Optional[StrictStr] = Field(default=None, alias="mobilePhone")
    balance_primary: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This is a read-only calculated field that returns the vendor&apos;s current accounts payable balance in the specified currency.", alias="balancePrimary")
    custentity_zc_po_required: Optional[StrictBool] = None
    unbilled_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="This field displays the total amount of orders that have been entered but not yet billed. If you have enabled the preference Vendor Credit Limit Includes Orders, then this total is included in credit limit calculations. Set this preference at Setup &gt; Accounting &gt; Preferences &gt; Accounting Preferences &gt; General.", alias="unbilledOrders")
    custentity_eff_nsp2p_autoproc_billscreds: Optional[StrictBool] = None
    custentity_ff_sc_field_block_mapping: Optional[StrictStr] = None
    alt_phone: Optional[StrictStr] = Field(default=None, description="Enter an optional alternate phone number for this record. Phone numbers can be entered in the following formats:999-999-9999, 1-999-999-9999, (999) 999-9999, 1(999) 999-9999 or 999-999-9999 ext 9999 .", alias="altPhone")
    custentity_zc_qty_tlrnce_amount: Optional[Union[StrictFloat, StrictInt]] = None
    custentity_bb1_cis_utr: Optional[StrictStr] = None
    fax_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this vendor. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the vendor on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this vendor is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this vendor is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this vendor is selected. Once you enter these settings on the vendor record, these boxes are checked by default for transactions created from the vendor record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new vendor records at Setup &gt; Company &gt; Printing, Fax and Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Vendors Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Update &gt; Mass Updates &gt; General and click Vendor.", alias="faxTransactions")
    custentity_rss_linkedin: Optional[StrictStr] = None
    custentity_vl_average_lead_time_on_goods: Optional[StrictInt] = None
    alt_email: Optional[StrictStr] = Field(default=None, alias="altEmail")
    purchase_order_quantity_diff: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the difference limit for the discrepancy between the quantity on the vendor bill and purchase order.", alias="purchaseOrderQuantityDiff")
    custentity_tax_contact_first: Optional[StrictStr] = None
    salutation: Optional[StrictStr] = None
    custentity_bb1_cis_hmrc_country: Optional[StrictStr] = None
    is_inactive: Optional[StrictBool] = Field(default=None, description="When you check this box, this vendor will no longer appear on a list unless you check the Show Inactives box at the bottom of the list page.", alias="isInactive")
    first_name: Optional[StrictStr] = Field(default=None, description="Optionally enter a first name here.", alias="firstName")
    home_phone: Optional[StrictStr] = Field(default=None, alias="homePhone")
    legal_name: Optional[StrictStr] = Field(default=None, description="Enter the legal name for this vendor for financial purposes. If you entered a name in the Company Name field, that name appears here.", alias="legalName")
    title: Optional[StrictStr] = None
    custentity_vl_trade_type_other: Optional[StrictStr] = None
    labor_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the cost of labor for this vendor in order to be able to calculate profitability on jobs.", alias="laborCost")
    give_access: Optional[StrictBool] = Field(default=None, description="Check this box to give your vendor access to NetSuite. On the Roles subtab, assign a role to customize the level of access. You can assign multiple roles. To let your vendor view prior transactions and purchase orders, select the Vendor Center role.", alias="giveAccess")
    default_shipping_address: Optional[StrictStr] = Field(default=None, description="Returns the vendor&apos;s default shipping address, if one is entered on the vendor record.", alias="defaultShippingAddress")
    custentity_rss_yoe: Optional[Union[StrictFloat, StrictInt]] = None
    purchase_order_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the tolerance limit for the discrepancy between the quantity on the vendor bill and purchase order", alias="purchaseOrderQuantity")
    custentity_bb1_cis_crn: Optional[StrictStr] = None
    custentity_vl_pli_amount: Optional[StrictStr] = None
    custentity_eff_nsp2p_lastrec_cocnumber: Optional[StrictStr] = None
    comments: Optional[StrictStr] = Field(default=None, description="Enter any other information you wish to track for this vendor.")
    account_number: Optional[StrictStr] = Field(default=None, description="If your vendors assign account numbers to you, enter one here. This number will later appear in these places: * In the Vendor # field on purchase orders * In the Memo field on checks", alias="accountNumber")
    last_modified_date: Optional[datetime] = Field(default=None, description="Returns the date on which the vendor record was last modified.", alias="lastModifiedDate")
    middle_name: Optional[StrictStr] = Field(default=None, description="Returns the vendor&apos;s middle name or initial, if one is entered on the vendor record.", alias="middleName")
    custentitypayeeaccountnumber: Optional[StrictStr] = None
    print_transactions: Optional[StrictBool] = Field(default=None, description="Set a preferred transaction delivery method for this vendor. Choose to send transactions by regular mail, by email, by fax, or by a combination of the three. Then, when you select the vendor on a transaction, their preferred delivery method is marked by default. * Email – Check this box to check the To Be Emailed box by default on transactions when this vendor is selected. * Print – Check this box to check the To Be Printed box by default on transactions when this vendor is selected. * Fax – Check this box to check the To Be Faxed box by default on transactions when this vendor is selected. Once you enter these settings on the vendor record, these boxes are checked by default for transactions created from the vendor record or for transactions that are copied or converted. Note: These settings override any customized settings on transaction forms you use. There are also preferences to set default values for new vendor records at Setup &gt; Company &gt; Printing, Fax and Email Preferences. On the Print subtab, Fax subtab, or Email subtab, check Vendors Default to [Print/Fax/Email] Transactions. You can also set these fields using the Mass Update function. Go to Lists &gt; Mass Update &gt; Mass Updates &gt; General and click Vendor.", alias="printTransactions")
    receipt_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter the tolerance limit for the discrepancy between the amount on the vendor bill and item receipt.", alias="receiptAmount")
    custentity_eff_nsp2p_procb2btran_aftersv: Optional[StrictBool] = None
    custentity_ff_sc_bank_account_number: Optional[StrictStr] = None
    custentity_erpff_p2p_basw_tax_scheme_id: Optional[StrictStr] = None
    send_email: Optional[StrictBool] = Field(default=None, description="Check this box to automatically send an email notifying the vendor that you have given limited access to your NetSuite account. The standard NetSuite email message also contains a link to let the user create a password. If you do not check this box, you must check the Manually Assign or Change Password box. You must create the password, and tell the user the password, and when and how to log in. For security reasons, do not send the password by email.", alias="sendEmail")
    credit_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Enter an optional credit limit for your purchases from this vendor. If you have a NetSuite OneWorld account, enter the global credit limit for this vendor and any assigned subsidiary. This value can exceed the sum of the vendor and subsidiary credit limits. This credit limit sets a maximum currency amount that should be spent using credit without making a payment. The value displays in the vendor’s primary currency. The default is no value, or no credit limit. You can place the vendor on hold by entering 0 (zero.) Any new purchase order or vendor bill transaction displays a warning message. You cannot enter a negative value. NetSuite validates the transaction amounts on purchase orders and vendor bills against the global credit limit specified in the Credit Limit field. NetSuite does not include individual subsidiary credit limits in the global credit limit validation.", alias="creditLimit")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    links: Optional[List[NsLink]] = None
    default_vendor_payment_account: Optional[NsResource] = Field(default=None, alias="defaultVendorPaymentAccount")
    custentity_zc_3wm_tlrnce_type_qty: Optional[NsResource] = None
    currency_list: Optional[VendorCurrencyListCollection] = Field(default=None, alias="currencyList")
    custentity_zc_3wm_tlrnce_type_rate: Optional[NsResource] = None
    roles: Optional[VendorRolesCollection] = None
    custentity_zc_prevailing_quantity: Optional[NsResource] = None
    custentity_zc_autoprocessing_preferences: Optional[NsResource] = None
    currency: Optional[NsResource] = None
    custentity_zc_ap_payment_schedule: Optional[NsResource] = None
    opening_balance_account: Optional[NsResource] = Field(default=None, alias="openingBalanceAccount")
    custentity_nx_location: Optional[NsResource] = None
    custentity_vl_trade_type: Optional[NsResource] = None
    subsidiary: Optional[NsResource] = None
    custentity_zc_ap_primary_beneficiary_acc: Optional[NsResource] = None
    custentity_erpff_p2p_party_endp_scheme: Optional[NsResource] = None
    rates: Optional[VendorRatesCollection] = None
    payables_account: Optional[NsResource] = Field(default=None, alias="payablesAccount")
    custentity_eff_nsp2p_createdfrom_bill2pr: Optional[NsResource] = None
    custentity_zc_3wm_tlrnce_type_amt: Optional[NsResource] = None
    custentity_tax_contact: Optional[NsResource] = None
    custentity_vl_contractor_location: Optional[NsResourceCollection] = None
    custentity_bb1_cis_contractor_type: Optional[NsResource] = None
    custentity_4601_defaultwitaxcode: Optional[NsResource] = None
    custentity_vl_main_delivery_method: Optional[NsResource] = None
    expense_account: Optional[NsResource] = Field(default=None, alias="expenseAccount")
    custentity_zc_prevailing_amount: Optional[NsResource] = None
    billing_class: Optional[NsResource] = Field(default=None, alias="billingClass")
    custentity_erpff_p2p_basw_tax_scheme: Optional[NsResource] = None
    terms: Optional[NsResource] = None
    category: Optional[NsResource] = None
    custentity_vl_entity_source: Optional[NsResource] = None
    default_bank_account: Optional[NsResource] = Field(default=None, alias="defaultBankAccount")
    custentity_vl_trade_ventro: Optional[NsResourceCollection] = None
    custentity_ff_sc_validation_rules: Optional[NsResource] = None
    image: Optional[NsResource] = None
    work_calendar: Optional[NsResource] = Field(default=None, alias="workCalendar")
    custentity_ff_sc_entity_ita_pay_term: Optional[NsResource] = None
    custentity_nx_skill: Optional[NsResourceCollection] = None
    address_book: Optional[VendorAddressBookCollection] = Field(default=None, alias="addressBook")
    contact: Optional[NsResource] = None
    representing_subsidiary: Optional[NsResource] = Field(default=None, alias="representingSubsidiary")
    custentity_zc_prevailing_rate: Optional[NsResource] = None
    custentity_payment_type: Optional[NsResource] = None
    incoterm: Optional[NsResource] = None
    custentity_eff_nsp2p_defaultitem: Optional[NsResource] = None
    custentity_ff_sc_ent_diff_pref: Optional[NsResource] = None
    custentity_vl_entity_type: Optional[NsResource] = None
    __properties: ClassVar[List[str]] = ["isJobResourceVend", "custentity_erpff_p2p_party_endpoint_id", "custentity_bb1_cis_cisenabled", "custentity_bb1_cis_ni_ref", "emailTransactions", "custentity_zc_3wm_exclude_from_3wm", "password", "custentity_vl_team_size", "custentity_ff_sc_iban", "custentity_zc_qty_tlrnce_percentage", "balance", "custentity_zc_amt_tlrnce_amount", "printOnCheckAs", "custentity_eff_nsp2p_lastrec_vatnumber", "id", "fax", "custentity_eff_nsp2p_currency_code", "custentity_ff_sc_ent_diff_pref_cust_id", "unbilledOrdersPrimary", "custentity_erpff_p2p_party_endp_sch_id", "custentity_vl_emergency_contact_person", "custentity_zc_rate_tlrnce_percentage", "dateCreated", "lastName", "receiptQuantityDiff", "phone", "requirePwdChange", "companyName", "custentitypayeeaccountaddress", "custentity_eff_nsp2p_lastrec_iban", "custentity_vl_public_liability_expiry", "custentity_erpff_p2p_party_endp_op_id", "custentity_ff_sc_entity_ita_apy_code", "defaultAddress", "openingBalance", "custentity_rss_website", "custentity_vl_capacity_install_per_month", "custentity_vl_trading_postcode", "custentity_bb1_cis_worksref", "isPerson", "custentity_zc_amt_tlrnce_percentage", "password2", "custentity_zc_disable_ai_fld_pop", "email", "openingBalanceDate", "custentity_tax_contact_last", "custentity_nx_labor_cost", "custentity_vl_employers_liability_expiry", "custentity_ff_sc_bank_code", "url", "custentity_vl_registered_address", "customForm", "custentity_vl_site_allocation", "autoName", "custentity_eff_nsp2p_lastrec_compname", "custentitypayeeaccountname", "custentity_ff_sc_dis_lin_rec", "custentity_tax_contact_middle", "custentity_eff_nsp2p_einvoice_number", "custentity_vl_trading_address", "custentitypayeesortcode", "custentity_vl_profl_indemnity_expiry", "externalId", "custentity_erpff_p2p_basw_tax_id", "entityId", "emailPreference", "subsidiaryEdition", "custentity_ff_sc_clickdata", "custentity_bb1_missingrecord", "purchaseOrderAmount", "isAutogeneratedRepresentingEntity", "receiptQuantity", "custentity_zc_rate_tlrnce_amount", "custentity_bb1_cis_hmrc_verification", "mobilePhone", "balancePrimary", "custentity_zc_po_required", "unbilledOrders", "custentity_eff_nsp2p_autoproc_billscreds", "custentity_ff_sc_field_block_mapping", "altPhone", "custentity_zc_qty_tlrnce_amount", "custentity_bb1_cis_utr", "faxTransactions", "custentity_rss_linkedin", "custentity_vl_average_lead_time_on_goods", "altEmail", "purchaseOrderQuantityDiff", "custentity_tax_contact_first", "salutation", "custentity_bb1_cis_hmrc_country", "isInactive", "firstName", "homePhone", "legalName", "title", "custentity_vl_trade_type_other", "laborCost", "giveAccess", "defaultShippingAddress", "custentity_rss_yoe", "purchaseOrderQuantity", "custentity_bb1_cis_crn", "custentity_vl_pli_amount", "custentity_eff_nsp2p_lastrec_cocnumber", "comments", "accountNumber", "lastModifiedDate", "middleName", "custentitypayeeaccountnumber", "printTransactions", "receiptAmount", "custentity_eff_nsp2p_procb2btran_aftersv", "custentity_ff_sc_bank_account_number", "custentity_erpff_p2p_basw_tax_scheme_id", "sendEmail", "creditLimit", "refName", "links", "defaultVendorPaymentAccount", "custentity_zc_3wm_tlrnce_type_qty", "currencyList", "custentity_zc_3wm_tlrnce_type_rate", "roles", "custentity_zc_prevailing_quantity", "custentity_zc_autoprocessing_preferences", "currency", "custentity_zc_ap_payment_schedule", "openingBalanceAccount", "custentity_nx_location", "custentity_vl_trade_type", "subsidiary", "custentity_zc_ap_primary_beneficiary_acc", "custentity_erpff_p2p_party_endp_scheme", "rates", "payablesAccount", "custentity_eff_nsp2p_createdfrom_bill2pr", "custentity_zc_3wm_tlrnce_type_amt", "custentity_tax_contact", "custentity_vl_contractor_location", "custentity_bb1_cis_contractor_type", "custentity_4601_defaultwitaxcode", "custentity_vl_main_delivery_method", "expenseAccount", "custentity_zc_prevailing_amount", "billingClass", "custentity_erpff_p2p_basw_tax_scheme", "terms", "category", "custentity_vl_entity_source", "defaultBankAccount", "custentity_vl_trade_ventro", "custentity_ff_sc_validation_rules", "image", "workCalendar", "custentity_ff_sc_entity_ita_pay_term", "custentity_nx_skill", "addressBook", "contact", "representingSubsidiary", "custentity_zc_prevailing_rate", "custentity_payment_type", "incoterm", "custentity_eff_nsp2p_defaultitem", "custentity_ff_sc_ent_diff_pref", "custentity_vl_entity_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Vendor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_form
        if self.custom_form:
            _dict['customForm'] = self.custom_form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_preference
        if self.email_preference:
            _dict['emailPreference'] = self.email_preference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_vendor_payment_account
        if self.default_vendor_payment_account:
            _dict['defaultVendorPaymentAccount'] = self.default_vendor_payment_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_3wm_tlrnce_type_qty
        if self.custentity_zc_3wm_tlrnce_type_qty:
            _dict['custentity_zc_3wm_tlrnce_type_qty'] = self.custentity_zc_3wm_tlrnce_type_qty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_list
        if self.currency_list:
            _dict['currencyList'] = self.currency_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_3wm_tlrnce_type_rate
        if self.custentity_zc_3wm_tlrnce_type_rate:
            _dict['custentity_zc_3wm_tlrnce_type_rate'] = self.custentity_zc_3wm_tlrnce_type_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict['roles'] = self.roles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_prevailing_quantity
        if self.custentity_zc_prevailing_quantity:
            _dict['custentity_zc_prevailing_quantity'] = self.custentity_zc_prevailing_quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_autoprocessing_preferences
        if self.custentity_zc_autoprocessing_preferences:
            _dict['custentity_zc_autoprocessing_preferences'] = self.custentity_zc_autoprocessing_preferences.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_ap_payment_schedule
        if self.custentity_zc_ap_payment_schedule:
            _dict['custentity_zc_ap_payment_schedule'] = self.custentity_zc_ap_payment_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening_balance_account
        if self.opening_balance_account:
            _dict['openingBalanceAccount'] = self.opening_balance_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_nx_location
        if self.custentity_nx_location:
            _dict['custentity_nx_location'] = self.custentity_nx_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_trade_type
        if self.custentity_vl_trade_type:
            _dict['custentity_vl_trade_type'] = self.custentity_vl_trade_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subsidiary
        if self.subsidiary:
            _dict['subsidiary'] = self.subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_ap_primary_beneficiary_acc
        if self.custentity_zc_ap_primary_beneficiary_acc:
            _dict['custentity_zc_ap_primary_beneficiary_acc'] = self.custentity_zc_ap_primary_beneficiary_acc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_erpff_p2p_party_endp_scheme
        if self.custentity_erpff_p2p_party_endp_scheme:
            _dict['custentity_erpff_p2p_party_endp_scheme'] = self.custentity_erpff_p2p_party_endp_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rates
        if self.rates:
            _dict['rates'] = self.rates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payables_account
        if self.payables_account:
            _dict['payablesAccount'] = self.payables_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_eff_nsp2p_createdfrom_bill2pr
        if self.custentity_eff_nsp2p_createdfrom_bill2pr:
            _dict['custentity_eff_nsp2p_createdfrom_bill2pr'] = self.custentity_eff_nsp2p_createdfrom_bill2pr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_3wm_tlrnce_type_amt
        if self.custentity_zc_3wm_tlrnce_type_amt:
            _dict['custentity_zc_3wm_tlrnce_type_amt'] = self.custentity_zc_3wm_tlrnce_type_amt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_tax_contact
        if self.custentity_tax_contact:
            _dict['custentity_tax_contact'] = self.custentity_tax_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_contractor_location
        if self.custentity_vl_contractor_location:
            _dict['custentity_vl_contractor_location'] = self.custentity_vl_contractor_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_bb1_cis_contractor_type
        if self.custentity_bb1_cis_contractor_type:
            _dict['custentity_bb1_cis_contractor_type'] = self.custentity_bb1_cis_contractor_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_4601_defaultwitaxcode
        if self.custentity_4601_defaultwitaxcode:
            _dict['custentity_4601_defaultwitaxcode'] = self.custentity_4601_defaultwitaxcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_main_delivery_method
        if self.custentity_vl_main_delivery_method:
            _dict['custentity_vl_main_delivery_method'] = self.custentity_vl_main_delivery_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expense_account
        if self.expense_account:
            _dict['expenseAccount'] = self.expense_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_prevailing_amount
        if self.custentity_zc_prevailing_amount:
            _dict['custentity_zc_prevailing_amount'] = self.custentity_zc_prevailing_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_class
        if self.billing_class:
            _dict['billingClass'] = self.billing_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_erpff_p2p_basw_tax_scheme
        if self.custentity_erpff_p2p_basw_tax_scheme:
            _dict['custentity_erpff_p2p_basw_tax_scheme'] = self.custentity_erpff_p2p_basw_tax_scheme.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_entity_source
        if self.custentity_vl_entity_source:
            _dict['custentity_vl_entity_source'] = self.custentity_vl_entity_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_bank_account
        if self.default_bank_account:
            _dict['defaultBankAccount'] = self.default_bank_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_trade_ventro
        if self.custentity_vl_trade_ventro:
            _dict['custentity_vl_trade_ventro'] = self.custentity_vl_trade_ventro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_validation_rules
        if self.custentity_ff_sc_validation_rules:
            _dict['custentity_ff_sc_validation_rules'] = self.custentity_ff_sc_validation_rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_calendar
        if self.work_calendar:
            _dict['workCalendar'] = self.work_calendar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_entity_ita_pay_term
        if self.custentity_ff_sc_entity_ita_pay_term:
            _dict['custentity_ff_sc_entity_ita_pay_term'] = self.custentity_ff_sc_entity_ita_pay_term.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_nx_skill
        if self.custentity_nx_skill:
            _dict['custentity_nx_skill'] = self.custentity_nx_skill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address_book
        if self.address_book:
            _dict['addressBook'] = self.address_book.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of representing_subsidiary
        if self.representing_subsidiary:
            _dict['representingSubsidiary'] = self.representing_subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_zc_prevailing_rate
        if self.custentity_zc_prevailing_rate:
            _dict['custentity_zc_prevailing_rate'] = self.custentity_zc_prevailing_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_payment_type
        if self.custentity_payment_type:
            _dict['custentity_payment_type'] = self.custentity_payment_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incoterm
        if self.incoterm:
            _dict['incoterm'] = self.incoterm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_eff_nsp2p_defaultitem
        if self.custentity_eff_nsp2p_defaultitem:
            _dict['custentity_eff_nsp2p_defaultitem'] = self.custentity_eff_nsp2p_defaultitem.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_ff_sc_ent_diff_pref
        if self.custentity_ff_sc_ent_diff_pref:
            _dict['custentity_ff_sc_ent_diff_pref'] = self.custentity_ff_sc_ent_diff_pref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custentity_vl_entity_type
        if self.custentity_vl_entity_type:
            _dict['custentity_vl_entity_type'] = self.custentity_vl_entity_type.to_dict()
        # set to None if custentity_erpff_p2p_party_endpoint_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endpoint_id is None and "custentity_erpff_p2p_party_endpoint_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endpoint_id'] = None

        # set to None if custentity_bb1_cis_ni_ref (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_ni_ref is None and "custentity_bb1_cis_ni_ref" in self.model_fields_set:
            _dict['custentity_bb1_cis_ni_ref'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if custentity_vl_team_size (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_team_size is None and "custentity_vl_team_size" in self.model_fields_set:
            _dict['custentity_vl_team_size'] = None

        # set to None if custentity_ff_sc_iban (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_iban is None and "custentity_ff_sc_iban" in self.model_fields_set:
            _dict['custentity_ff_sc_iban'] = None

        # set to None if custentity_zc_qty_tlrnce_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_qty_tlrnce_percentage is None and "custentity_zc_qty_tlrnce_percentage" in self.model_fields_set:
            _dict['custentity_zc_qty_tlrnce_percentage'] = None

        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if custentity_zc_amt_tlrnce_amount (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_amt_tlrnce_amount is None and "custentity_zc_amt_tlrnce_amount" in self.model_fields_set:
            _dict['custentity_zc_amt_tlrnce_amount'] = None

        # set to None if print_on_check_as (nullable) is None
        # and model_fields_set contains the field
        if self.print_on_check_as is None and "print_on_check_as" in self.model_fields_set:
            _dict['printOnCheckAs'] = None

        # set to None if custentity_eff_nsp2p_lastrec_vatnumber (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_lastrec_vatnumber is None and "custentity_eff_nsp2p_lastrec_vatnumber" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_lastrec_vatnumber'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['fax'] = None

        # set to None if custentity_eff_nsp2p_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_currency_code is None and "custentity_eff_nsp2p_currency_code" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_currency_code'] = None

        # set to None if custentity_ff_sc_ent_diff_pref_cust_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_ent_diff_pref_cust_id is None and "custentity_ff_sc_ent_diff_pref_cust_id" in self.model_fields_set:
            _dict['custentity_ff_sc_ent_diff_pref_cust_id'] = None

        # set to None if unbilled_orders_primary (nullable) is None
        # and model_fields_set contains the field
        if self.unbilled_orders_primary is None and "unbilled_orders_primary" in self.model_fields_set:
            _dict['unbilledOrdersPrimary'] = None

        # set to None if custentity_erpff_p2p_party_endp_sch_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endp_sch_id is None and "custentity_erpff_p2p_party_endp_sch_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endp_sch_id'] = None

        # set to None if custentity_vl_emergency_contact_person (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_emergency_contact_person is None and "custentity_vl_emergency_contact_person" in self.model_fields_set:
            _dict['custentity_vl_emergency_contact_person'] = None

        # set to None if custentity_zc_rate_tlrnce_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_rate_tlrnce_percentage is None and "custentity_zc_rate_tlrnce_percentage" in self.model_fields_set:
            _dict['custentity_zc_rate_tlrnce_percentage'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['dateCreated'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if receipt_quantity_diff (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_quantity_diff is None and "receipt_quantity_diff" in self.model_fields_set:
            _dict['receiptQuantityDiff'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if custentitypayeeaccountaddress (nullable) is None
        # and model_fields_set contains the field
        if self.custentitypayeeaccountaddress is None and "custentitypayeeaccountaddress" in self.model_fields_set:
            _dict['custentitypayeeaccountaddress'] = None

        # set to None if custentity_eff_nsp2p_lastrec_iban (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_lastrec_iban is None and "custentity_eff_nsp2p_lastrec_iban" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_lastrec_iban'] = None

        # set to None if custentity_vl_public_liability_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_public_liability_expiry is None and "custentity_vl_public_liability_expiry" in self.model_fields_set:
            _dict['custentity_vl_public_liability_expiry'] = None

        # set to None if custentity_erpff_p2p_party_endp_op_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_party_endp_op_id is None and "custentity_erpff_p2p_party_endp_op_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_party_endp_op_id'] = None

        # set to None if custentity_ff_sc_entity_ita_apy_code (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_entity_ita_apy_code is None and "custentity_ff_sc_entity_ita_apy_code" in self.model_fields_set:
            _dict['custentity_ff_sc_entity_ita_apy_code'] = None

        # set to None if default_address (nullable) is None
        # and model_fields_set contains the field
        if self.default_address is None and "default_address" in self.model_fields_set:
            _dict['defaultAddress'] = None

        # set to None if opening_balance (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance is None and "opening_balance" in self.model_fields_set:
            _dict['openingBalance'] = None

        # set to None if custentity_rss_website (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_rss_website is None and "custentity_rss_website" in self.model_fields_set:
            _dict['custentity_rss_website'] = None

        # set to None if custentity_vl_capacity_install_per_month (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_capacity_install_per_month is None and "custentity_vl_capacity_install_per_month" in self.model_fields_set:
            _dict['custentity_vl_capacity_install_per_month'] = None

        # set to None if custentity_vl_trading_postcode (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_trading_postcode is None and "custentity_vl_trading_postcode" in self.model_fields_set:
            _dict['custentity_vl_trading_postcode'] = None

        # set to None if custentity_bb1_cis_worksref (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_worksref is None and "custentity_bb1_cis_worksref" in self.model_fields_set:
            _dict['custentity_bb1_cis_worksref'] = None

        # set to None if custentity_zc_amt_tlrnce_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_amt_tlrnce_percentage is None and "custentity_zc_amt_tlrnce_percentage" in self.model_fields_set:
            _dict['custentity_zc_amt_tlrnce_percentage'] = None

        # set to None if password2 (nullable) is None
        # and model_fields_set contains the field
        if self.password2 is None and "password2" in self.model_fields_set:
            _dict['password2'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if opening_balance_date (nullable) is None
        # and model_fields_set contains the field
        if self.opening_balance_date is None and "opening_balance_date" in self.model_fields_set:
            _dict['openingBalanceDate'] = None

        # set to None if custentity_tax_contact_last (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_last is None and "custentity_tax_contact_last" in self.model_fields_set:
            _dict['custentity_tax_contact_last'] = None

        # set to None if custentity_nx_labor_cost (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_nx_labor_cost is None and "custentity_nx_labor_cost" in self.model_fields_set:
            _dict['custentity_nx_labor_cost'] = None

        # set to None if custentity_vl_employers_liability_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_employers_liability_expiry is None and "custentity_vl_employers_liability_expiry" in self.model_fields_set:
            _dict['custentity_vl_employers_liability_expiry'] = None

        # set to None if custentity_ff_sc_bank_code (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_bank_code is None and "custentity_ff_sc_bank_code" in self.model_fields_set:
            _dict['custentity_ff_sc_bank_code'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if custentity_vl_registered_address (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_registered_address is None and "custentity_vl_registered_address" in self.model_fields_set:
            _dict['custentity_vl_registered_address'] = None

        # set to None if custentity_vl_site_allocation (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_site_allocation is None and "custentity_vl_site_allocation" in self.model_fields_set:
            _dict['custentity_vl_site_allocation'] = None

        # set to None if custentity_eff_nsp2p_lastrec_compname (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_lastrec_compname is None and "custentity_eff_nsp2p_lastrec_compname" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_lastrec_compname'] = None

        # set to None if custentitypayeeaccountname (nullable) is None
        # and model_fields_set contains the field
        if self.custentitypayeeaccountname is None and "custentitypayeeaccountname" in self.model_fields_set:
            _dict['custentitypayeeaccountname'] = None

        # set to None if custentity_tax_contact_middle (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_middle is None and "custentity_tax_contact_middle" in self.model_fields_set:
            _dict['custentity_tax_contact_middle'] = None

        # set to None if custentity_eff_nsp2p_einvoice_number (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_einvoice_number is None and "custentity_eff_nsp2p_einvoice_number" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_einvoice_number'] = None

        # set to None if custentity_vl_trading_address (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_trading_address is None and "custentity_vl_trading_address" in self.model_fields_set:
            _dict['custentity_vl_trading_address'] = None

        # set to None if custentitypayeesortcode (nullable) is None
        # and model_fields_set contains the field
        if self.custentitypayeesortcode is None and "custentitypayeesortcode" in self.model_fields_set:
            _dict['custentitypayeesortcode'] = None

        # set to None if custentity_vl_profl_indemnity_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_profl_indemnity_expiry is None and "custentity_vl_profl_indemnity_expiry" in self.model_fields_set:
            _dict['custentity_vl_profl_indemnity_expiry'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['externalId'] = None

        # set to None if custentity_erpff_p2p_basw_tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_basw_tax_id is None and "custentity_erpff_p2p_basw_tax_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_basw_tax_id'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entityId'] = None

        # set to None if subsidiary_edition (nullable) is None
        # and model_fields_set contains the field
        if self.subsidiary_edition is None and "subsidiary_edition" in self.model_fields_set:
            _dict['subsidiaryEdition'] = None

        # set to None if custentity_ff_sc_clickdata (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_clickdata is None and "custentity_ff_sc_clickdata" in self.model_fields_set:
            _dict['custentity_ff_sc_clickdata'] = None

        # set to None if purchase_order_amount (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_amount is None and "purchase_order_amount" in self.model_fields_set:
            _dict['purchaseOrderAmount'] = None

        # set to None if receipt_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_quantity is None and "receipt_quantity" in self.model_fields_set:
            _dict['receiptQuantity'] = None

        # set to None if custentity_zc_rate_tlrnce_amount (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_rate_tlrnce_amount is None and "custentity_zc_rate_tlrnce_amount" in self.model_fields_set:
            _dict['custentity_zc_rate_tlrnce_amount'] = None

        # set to None if custentity_bb1_cis_hmrc_verification (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_hmrc_verification is None and "custentity_bb1_cis_hmrc_verification" in self.model_fields_set:
            _dict['custentity_bb1_cis_hmrc_verification'] = None

        # set to None if mobile_phone (nullable) is None
        # and model_fields_set contains the field
        if self.mobile_phone is None and "mobile_phone" in self.model_fields_set:
            _dict['mobilePhone'] = None

        # set to None if balance_primary (nullable) is None
        # and model_fields_set contains the field
        if self.balance_primary is None and "balance_primary" in self.model_fields_set:
            _dict['balancePrimary'] = None

        # set to None if unbilled_orders (nullable) is None
        # and model_fields_set contains the field
        if self.unbilled_orders is None and "unbilled_orders" in self.model_fields_set:
            _dict['unbilledOrders'] = None

        # set to None if custentity_ff_sc_field_block_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_field_block_mapping is None and "custentity_ff_sc_field_block_mapping" in self.model_fields_set:
            _dict['custentity_ff_sc_field_block_mapping'] = None

        # set to None if alt_phone (nullable) is None
        # and model_fields_set contains the field
        if self.alt_phone is None and "alt_phone" in self.model_fields_set:
            _dict['altPhone'] = None

        # set to None if custentity_zc_qty_tlrnce_amount (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_zc_qty_tlrnce_amount is None and "custentity_zc_qty_tlrnce_amount" in self.model_fields_set:
            _dict['custentity_zc_qty_tlrnce_amount'] = None

        # set to None if custentity_bb1_cis_utr (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_utr is None and "custentity_bb1_cis_utr" in self.model_fields_set:
            _dict['custentity_bb1_cis_utr'] = None

        # set to None if custentity_rss_linkedin (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_rss_linkedin is None and "custentity_rss_linkedin" in self.model_fields_set:
            _dict['custentity_rss_linkedin'] = None

        # set to None if custentity_vl_average_lead_time_on_goods (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_average_lead_time_on_goods is None and "custentity_vl_average_lead_time_on_goods" in self.model_fields_set:
            _dict['custentity_vl_average_lead_time_on_goods'] = None

        # set to None if alt_email (nullable) is None
        # and model_fields_set contains the field
        if self.alt_email is None and "alt_email" in self.model_fields_set:
            _dict['altEmail'] = None

        # set to None if purchase_order_quantity_diff (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_quantity_diff is None and "purchase_order_quantity_diff" in self.model_fields_set:
            _dict['purchaseOrderQuantityDiff'] = None

        # set to None if custentity_tax_contact_first (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_tax_contact_first is None and "custentity_tax_contact_first" in self.model_fields_set:
            _dict['custentity_tax_contact_first'] = None

        # set to None if salutation (nullable) is None
        # and model_fields_set contains the field
        if self.salutation is None and "salutation" in self.model_fields_set:
            _dict['salutation'] = None

        # set to None if custentity_bb1_cis_hmrc_country (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_hmrc_country is None and "custentity_bb1_cis_hmrc_country" in self.model_fields_set:
            _dict['custentity_bb1_cis_hmrc_country'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if home_phone (nullable) is None
        # and model_fields_set contains the field
        if self.home_phone is None and "home_phone" in self.model_fields_set:
            _dict['homePhone'] = None

        # set to None if legal_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_name is None and "legal_name" in self.model_fields_set:
            _dict['legalName'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if custentity_vl_trade_type_other (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_trade_type_other is None and "custentity_vl_trade_type_other" in self.model_fields_set:
            _dict['custentity_vl_trade_type_other'] = None

        # set to None if labor_cost (nullable) is None
        # and model_fields_set contains the field
        if self.labor_cost is None and "labor_cost" in self.model_fields_set:
            _dict['laborCost'] = None

        # set to None if default_shipping_address (nullable) is None
        # and model_fields_set contains the field
        if self.default_shipping_address is None and "default_shipping_address" in self.model_fields_set:
            _dict['defaultShippingAddress'] = None

        # set to None if custentity_rss_yoe (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_rss_yoe is None and "custentity_rss_yoe" in self.model_fields_set:
            _dict['custentity_rss_yoe'] = None

        # set to None if purchase_order_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.purchase_order_quantity is None and "purchase_order_quantity" in self.model_fields_set:
            _dict['purchaseOrderQuantity'] = None

        # set to None if custentity_bb1_cis_crn (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_bb1_cis_crn is None and "custentity_bb1_cis_crn" in self.model_fields_set:
            _dict['custentity_bb1_cis_crn'] = None

        # set to None if custentity_vl_pli_amount (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_vl_pli_amount is None and "custentity_vl_pli_amount" in self.model_fields_set:
            _dict['custentity_vl_pli_amount'] = None

        # set to None if custentity_eff_nsp2p_lastrec_cocnumber (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_eff_nsp2p_lastrec_cocnumber is None and "custentity_eff_nsp2p_lastrec_cocnumber" in self.model_fields_set:
            _dict['custentity_eff_nsp2p_lastrec_cocnumber'] = None

        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if account_number (nullable) is None
        # and model_fields_set contains the field
        if self.account_number is None and "account_number" in self.model_fields_set:
            _dict['accountNumber'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if middle_name (nullable) is None
        # and model_fields_set contains the field
        if self.middle_name is None and "middle_name" in self.model_fields_set:
            _dict['middleName'] = None

        # set to None if custentitypayeeaccountnumber (nullable) is None
        # and model_fields_set contains the field
        if self.custentitypayeeaccountnumber is None and "custentitypayeeaccountnumber" in self.model_fields_set:
            _dict['custentitypayeeaccountnumber'] = None

        # set to None if receipt_amount (nullable) is None
        # and model_fields_set contains the field
        if self.receipt_amount is None and "receipt_amount" in self.model_fields_set:
            _dict['receiptAmount'] = None

        # set to None if custentity_ff_sc_bank_account_number (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_ff_sc_bank_account_number is None and "custentity_ff_sc_bank_account_number" in self.model_fields_set:
            _dict['custentity_ff_sc_bank_account_number'] = None

        # set to None if custentity_erpff_p2p_basw_tax_scheme_id (nullable) is None
        # and model_fields_set contains the field
        if self.custentity_erpff_p2p_basw_tax_scheme_id is None and "custentity_erpff_p2p_basw_tax_scheme_id" in self.model_fields_set:
            _dict['custentity_erpff_p2p_basw_tax_scheme_id'] = None

        # set to None if credit_limit (nullable) is None
        # and model_fields_set contains the field
        if self.credit_limit is None and "credit_limit" in self.model_fields_set:
            _dict['creditLimit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Vendor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isJobResourceVend": obj.get("isJobResourceVend"),
            "custentity_erpff_p2p_party_endpoint_id": obj.get("custentity_erpff_p2p_party_endpoint_id"),
            "custentity_bb1_cis_cisenabled": obj.get("custentity_bb1_cis_cisenabled"),
            "custentity_bb1_cis_ni_ref": obj.get("custentity_bb1_cis_ni_ref"),
            "emailTransactions": obj.get("emailTransactions"),
            "custentity_zc_3wm_exclude_from_3wm": obj.get("custentity_zc_3wm_exclude_from_3wm"),
            "password": obj.get("password"),
            "custentity_vl_team_size": obj.get("custentity_vl_team_size"),
            "custentity_ff_sc_iban": obj.get("custentity_ff_sc_iban"),
            "custentity_zc_qty_tlrnce_percentage": obj.get("custentity_zc_qty_tlrnce_percentage"),
            "balance": obj.get("balance"),
            "custentity_zc_amt_tlrnce_amount": obj.get("custentity_zc_amt_tlrnce_amount"),
            "printOnCheckAs": obj.get("printOnCheckAs"),
            "custentity_eff_nsp2p_lastrec_vatnumber": obj.get("custentity_eff_nsp2p_lastrec_vatnumber"),
            "id": obj.get("id"),
            "fax": obj.get("fax"),
            "custentity_eff_nsp2p_currency_code": obj.get("custentity_eff_nsp2p_currency_code"),
            "custentity_ff_sc_ent_diff_pref_cust_id": obj.get("custentity_ff_sc_ent_diff_pref_cust_id"),
            "unbilledOrdersPrimary": obj.get("unbilledOrdersPrimary"),
            "custentity_erpff_p2p_party_endp_sch_id": obj.get("custentity_erpff_p2p_party_endp_sch_id"),
            "custentity_vl_emergency_contact_person": obj.get("custentity_vl_emergency_contact_person"),
            "custentity_zc_rate_tlrnce_percentage": obj.get("custentity_zc_rate_tlrnce_percentage"),
            "dateCreated": obj.get("dateCreated"),
            "lastName": obj.get("lastName"),
            "receiptQuantityDiff": obj.get("receiptQuantityDiff"),
            "phone": obj.get("phone"),
            "requirePwdChange": obj.get("requirePwdChange"),
            "companyName": obj.get("companyName"),
            "custentitypayeeaccountaddress": obj.get("custentitypayeeaccountaddress"),
            "custentity_eff_nsp2p_lastrec_iban": obj.get("custentity_eff_nsp2p_lastrec_iban"),
            "custentity_vl_public_liability_expiry": obj.get("custentity_vl_public_liability_expiry"),
            "custentity_erpff_p2p_party_endp_op_id": obj.get("custentity_erpff_p2p_party_endp_op_id"),
            "custentity_ff_sc_entity_ita_apy_code": obj.get("custentity_ff_sc_entity_ita_apy_code"),
            "defaultAddress": obj.get("defaultAddress"),
            "openingBalance": obj.get("openingBalance"),
            "custentity_rss_website": obj.get("custentity_rss_website"),
            "custentity_vl_capacity_install_per_month": obj.get("custentity_vl_capacity_install_per_month"),
            "custentity_vl_trading_postcode": obj.get("custentity_vl_trading_postcode"),
            "custentity_bb1_cis_worksref": obj.get("custentity_bb1_cis_worksref"),
            "isPerson": obj.get("isPerson"),
            "custentity_zc_amt_tlrnce_percentage": obj.get("custentity_zc_amt_tlrnce_percentage"),
            "password2": obj.get("password2"),
            "custentity_zc_disable_ai_fld_pop": obj.get("custentity_zc_disable_ai_fld_pop"),
            "email": obj.get("email"),
            "openingBalanceDate": obj.get("openingBalanceDate"),
            "custentity_tax_contact_last": obj.get("custentity_tax_contact_last"),
            "custentity_nx_labor_cost": obj.get("custentity_nx_labor_cost"),
            "custentity_vl_employers_liability_expiry": obj.get("custentity_vl_employers_liability_expiry"),
            "custentity_ff_sc_bank_code": obj.get("custentity_ff_sc_bank_code"),
            "url": obj.get("url"),
            "custentity_vl_registered_address": obj.get("custentity_vl_registered_address"),
            "customForm": VendorCustomForm.from_dict(obj["customForm"]) if obj.get("customForm") is not None else None,
            "custentity_vl_site_allocation": obj.get("custentity_vl_site_allocation"),
            "autoName": obj.get("autoName"),
            "custentity_eff_nsp2p_lastrec_compname": obj.get("custentity_eff_nsp2p_lastrec_compname"),
            "custentitypayeeaccountname": obj.get("custentitypayeeaccountname"),
            "custentity_ff_sc_dis_lin_rec": obj.get("custentity_ff_sc_dis_lin_rec"),
            "custentity_tax_contact_middle": obj.get("custentity_tax_contact_middle"),
            "custentity_eff_nsp2p_einvoice_number": obj.get("custentity_eff_nsp2p_einvoice_number"),
            "custentity_vl_trading_address": obj.get("custentity_vl_trading_address"),
            "custentitypayeesortcode": obj.get("custentitypayeesortcode"),
            "custentity_vl_profl_indemnity_expiry": obj.get("custentity_vl_profl_indemnity_expiry"),
            "externalId": obj.get("externalId"),
            "custentity_erpff_p2p_basw_tax_id": obj.get("custentity_erpff_p2p_basw_tax_id"),
            "entityId": obj.get("entityId"),
            "emailPreference": VendorEmailPreference.from_dict(obj["emailPreference"]) if obj.get("emailPreference") is not None else None,
            "subsidiaryEdition": obj.get("subsidiaryEdition"),
            "custentity_ff_sc_clickdata": obj.get("custentity_ff_sc_clickdata"),
            "custentity_bb1_missingrecord": obj.get("custentity_bb1_missingrecord"),
            "purchaseOrderAmount": obj.get("purchaseOrderAmount"),
            "isAutogeneratedRepresentingEntity": obj.get("isAutogeneratedRepresentingEntity"),
            "receiptQuantity": obj.get("receiptQuantity"),
            "custentity_zc_rate_tlrnce_amount": obj.get("custentity_zc_rate_tlrnce_amount"),
            "custentity_bb1_cis_hmrc_verification": obj.get("custentity_bb1_cis_hmrc_verification"),
            "mobilePhone": obj.get("mobilePhone"),
            "balancePrimary": obj.get("balancePrimary"),
            "custentity_zc_po_required": obj.get("custentity_zc_po_required"),
            "unbilledOrders": obj.get("unbilledOrders"),
            "custentity_eff_nsp2p_autoproc_billscreds": obj.get("custentity_eff_nsp2p_autoproc_billscreds"),
            "custentity_ff_sc_field_block_mapping": obj.get("custentity_ff_sc_field_block_mapping"),
            "altPhone": obj.get("altPhone"),
            "custentity_zc_qty_tlrnce_amount": obj.get("custentity_zc_qty_tlrnce_amount"),
            "custentity_bb1_cis_utr": obj.get("custentity_bb1_cis_utr"),
            "faxTransactions": obj.get("faxTransactions"),
            "custentity_rss_linkedin": obj.get("custentity_rss_linkedin"),
            "custentity_vl_average_lead_time_on_goods": obj.get("custentity_vl_average_lead_time_on_goods"),
            "altEmail": obj.get("altEmail"),
            "purchaseOrderQuantityDiff": obj.get("purchaseOrderQuantityDiff"),
            "custentity_tax_contact_first": obj.get("custentity_tax_contact_first"),
            "salutation": obj.get("salutation"),
            "custentity_bb1_cis_hmrc_country": obj.get("custentity_bb1_cis_hmrc_country"),
            "isInactive": obj.get("isInactive"),
            "firstName": obj.get("firstName"),
            "homePhone": obj.get("homePhone"),
            "legalName": obj.get("legalName"),
            "title": obj.get("title"),
            "custentity_vl_trade_type_other": obj.get("custentity_vl_trade_type_other"),
            "laborCost": obj.get("laborCost"),
            "giveAccess": obj.get("giveAccess"),
            "defaultShippingAddress": obj.get("defaultShippingAddress"),
            "custentity_rss_yoe": obj.get("custentity_rss_yoe"),
            "purchaseOrderQuantity": obj.get("purchaseOrderQuantity"),
            "custentity_bb1_cis_crn": obj.get("custentity_bb1_cis_crn"),
            "custentity_vl_pli_amount": obj.get("custentity_vl_pli_amount"),
            "custentity_eff_nsp2p_lastrec_cocnumber": obj.get("custentity_eff_nsp2p_lastrec_cocnumber"),
            "comments": obj.get("comments"),
            "accountNumber": obj.get("accountNumber"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "middleName": obj.get("middleName"),
            "custentitypayeeaccountnumber": obj.get("custentitypayeeaccountnumber"),
            "printTransactions": obj.get("printTransactions"),
            "receiptAmount": obj.get("receiptAmount"),
            "custentity_eff_nsp2p_procb2btran_aftersv": obj.get("custentity_eff_nsp2p_procb2btran_aftersv"),
            "custentity_ff_sc_bank_account_number": obj.get("custentity_ff_sc_bank_account_number"),
            "custentity_erpff_p2p_basw_tax_scheme_id": obj.get("custentity_erpff_p2p_basw_tax_scheme_id"),
            "sendEmail": obj.get("sendEmail"),
            "creditLimit": obj.get("creditLimit"),
            "refName": obj.get("refName"),
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "defaultVendorPaymentAccount": NsResource.from_dict(obj["defaultVendorPaymentAccount"]) if obj.get("defaultVendorPaymentAccount") is not None else None,
            "custentity_zc_3wm_tlrnce_type_qty": NsResource.from_dict(obj["custentity_zc_3wm_tlrnce_type_qty"]) if obj.get("custentity_zc_3wm_tlrnce_type_qty") is not None else None,
            "currencyList": VendorCurrencyListCollection.from_dict(obj["currencyList"]) if obj.get("currencyList") is not None else None,
            "custentity_zc_3wm_tlrnce_type_rate": NsResource.from_dict(obj["custentity_zc_3wm_tlrnce_type_rate"]) if obj.get("custentity_zc_3wm_tlrnce_type_rate") is not None else None,
            "roles": VendorRolesCollection.from_dict(obj["roles"]) if obj.get("roles") is not None else None,
            "custentity_zc_prevailing_quantity": NsResource.from_dict(obj["custentity_zc_prevailing_quantity"]) if obj.get("custentity_zc_prevailing_quantity") is not None else None,
            "custentity_zc_autoprocessing_preferences": NsResource.from_dict(obj["custentity_zc_autoprocessing_preferences"]) if obj.get("custentity_zc_autoprocessing_preferences") is not None else None,
            "currency": NsResource.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "custentity_zc_ap_payment_schedule": NsResource.from_dict(obj["custentity_zc_ap_payment_schedule"]) if obj.get("custentity_zc_ap_payment_schedule") is not None else None,
            "openingBalanceAccount": NsResource.from_dict(obj["openingBalanceAccount"]) if obj.get("openingBalanceAccount") is not None else None,
            "custentity_nx_location": NsResource.from_dict(obj["custentity_nx_location"]) if obj.get("custentity_nx_location") is not None else None,
            "custentity_vl_trade_type": NsResource.from_dict(obj["custentity_vl_trade_type"]) if obj.get("custentity_vl_trade_type") is not None else None,
            "subsidiary": NsResource.from_dict(obj["subsidiary"]) if obj.get("subsidiary") is not None else None,
            "custentity_zc_ap_primary_beneficiary_acc": NsResource.from_dict(obj["custentity_zc_ap_primary_beneficiary_acc"]) if obj.get("custentity_zc_ap_primary_beneficiary_acc") is not None else None,
            "custentity_erpff_p2p_party_endp_scheme": NsResource.from_dict(obj["custentity_erpff_p2p_party_endp_scheme"]) if obj.get("custentity_erpff_p2p_party_endp_scheme") is not None else None,
            "rates": VendorRatesCollection.from_dict(obj["rates"]) if obj.get("rates") is not None else None,
            "payablesAccount": NsResource.from_dict(obj["payablesAccount"]) if obj.get("payablesAccount") is not None else None,
            "custentity_eff_nsp2p_createdfrom_bill2pr": NsResource.from_dict(obj["custentity_eff_nsp2p_createdfrom_bill2pr"]) if obj.get("custentity_eff_nsp2p_createdfrom_bill2pr") is not None else None,
            "custentity_zc_3wm_tlrnce_type_amt": NsResource.from_dict(obj["custentity_zc_3wm_tlrnce_type_amt"]) if obj.get("custentity_zc_3wm_tlrnce_type_amt") is not None else None,
            "custentity_tax_contact": NsResource.from_dict(obj["custentity_tax_contact"]) if obj.get("custentity_tax_contact") is not None else None,
            "custentity_vl_contractor_location": NsResourceCollection.from_dict(obj["custentity_vl_contractor_location"]) if obj.get("custentity_vl_contractor_location") is not None else None,
            "custentity_bb1_cis_contractor_type": NsResource.from_dict(obj["custentity_bb1_cis_contractor_type"]) if obj.get("custentity_bb1_cis_contractor_type") is not None else None,
            "custentity_4601_defaultwitaxcode": NsResource.from_dict(obj["custentity_4601_defaultwitaxcode"]) if obj.get("custentity_4601_defaultwitaxcode") is not None else None,
            "custentity_vl_main_delivery_method": NsResource.from_dict(obj["custentity_vl_main_delivery_method"]) if obj.get("custentity_vl_main_delivery_method") is not None else None,
            "expenseAccount": NsResource.from_dict(obj["expenseAccount"]) if obj.get("expenseAccount") is not None else None,
            "custentity_zc_prevailing_amount": NsResource.from_dict(obj["custentity_zc_prevailing_amount"]) if obj.get("custentity_zc_prevailing_amount") is not None else None,
            "billingClass": NsResource.from_dict(obj["billingClass"]) if obj.get("billingClass") is not None else None,
            "custentity_erpff_p2p_basw_tax_scheme": NsResource.from_dict(obj["custentity_erpff_p2p_basw_tax_scheme"]) if obj.get("custentity_erpff_p2p_basw_tax_scheme") is not None else None,
            "terms": NsResource.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "category": NsResource.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "custentity_vl_entity_source": NsResource.from_dict(obj["custentity_vl_entity_source"]) if obj.get("custentity_vl_entity_source") is not None else None,
            "defaultBankAccount": NsResource.from_dict(obj["defaultBankAccount"]) if obj.get("defaultBankAccount") is not None else None,
            "custentity_vl_trade_ventro": NsResourceCollection.from_dict(obj["custentity_vl_trade_ventro"]) if obj.get("custentity_vl_trade_ventro") is not None else None,
            "custentity_ff_sc_validation_rules": NsResource.from_dict(obj["custentity_ff_sc_validation_rules"]) if obj.get("custentity_ff_sc_validation_rules") is not None else None,
            "image": NsResource.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "workCalendar": NsResource.from_dict(obj["workCalendar"]) if obj.get("workCalendar") is not None else None,
            "custentity_ff_sc_entity_ita_pay_term": NsResource.from_dict(obj["custentity_ff_sc_entity_ita_pay_term"]) if obj.get("custentity_ff_sc_entity_ita_pay_term") is not None else None,
            "custentity_nx_skill": NsResourceCollection.from_dict(obj["custentity_nx_skill"]) if obj.get("custentity_nx_skill") is not None else None,
            "addressBook": VendorAddressBookCollection.from_dict(obj["addressBook"]) if obj.get("addressBook") is not None else None,
            "contact": NsResource.from_dict(obj["contact"]) if obj.get("contact") is not None else None,
            "representingSubsidiary": NsResource.from_dict(obj["representingSubsidiary"]) if obj.get("representingSubsidiary") is not None else None,
            "custentity_zc_prevailing_rate": NsResource.from_dict(obj["custentity_zc_prevailing_rate"]) if obj.get("custentity_zc_prevailing_rate") is not None else None,
            "custentity_payment_type": NsResource.from_dict(obj["custentity_payment_type"]) if obj.get("custentity_payment_type") is not None else None,
            "incoterm": NsResource.from_dict(obj["incoterm"]) if obj.get("incoterm") is not None else None,
            "custentity_eff_nsp2p_defaultitem": NsResource.from_dict(obj["custentity_eff_nsp2p_defaultitem"]) if obj.get("custentity_eff_nsp2p_defaultitem") is not None else None,
            "custentity_ff_sc_ent_diff_pref": NsResource.from_dict(obj["custentity_ff_sc_ent_diff_pref"]) if obj.get("custentity_ff_sc_ent_diff_pref") is not None else None,
            "custentity_vl_entity_type": NsResource.from_dict(obj["custentity_vl_entity_type"]) if obj.get("custentity_vl_entity_type") is not None else None
        })
        return _obj


