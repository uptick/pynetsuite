# coding: utf-8

"""
    NetSuite REST Record API

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from typing import Optional, Set
from typing_extensions import Self

class CreditMemoApplyElement(BaseModel):
    """
    CreditMemoApplyElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    apply_date: Optional[date] = Field(default=None, alias="applyDate")
    ref_num: Optional[StrictStr] = Field(default=None, alias="refNum")
    apply: Optional[StrictBool] = None
    due: Optional[Union[StrictFloat, StrictInt]] = None
    line: Optional[StrictInt] = None
    created_from: Optional[StrictStr] = Field(default=None, alias="createdFrom")
    currency: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    doc: Optional[NsResource] = None
    __properties: ClassVar[List[str]] = ["links", "total", "amount", "applyDate", "refNum", "apply", "due", "line", "createdFrom", "currency", "type", "refName", "doc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditMemoApplyElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of doc
        if self.doc:
            _dict['doc'] = self.doc.to_dict()
        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if apply_date (nullable) is None
        # and model_fields_set contains the field
        if self.apply_date is None and "apply_date" in self.model_fields_set:
            _dict['applyDate'] = None

        # set to None if ref_num (nullable) is None
        # and model_fields_set contains the field
        if self.ref_num is None and "ref_num" in self.model_fields_set:
            _dict['refNum'] = None

        # set to None if due (nullable) is None
        # and model_fields_set contains the field
        if self.due is None and "due" in self.model_fields_set:
            _dict['due'] = None

        # set to None if line (nullable) is None
        # and model_fields_set contains the field
        if self.line is None and "line" in self.model_fields_set:
            _dict['line'] = None

        # set to None if created_from (nullable) is None
        # and model_fields_set contains the field
        if self.created_from is None and "created_from" in self.model_fields_set:
            _dict['createdFrom'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditMemoApplyElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "total": obj.get("total"),
            "amount": obj.get("amount"),
            "applyDate": obj.get("applyDate"),
            "refNum": obj.get("refNum"),
            "apply": obj.get("apply"),
            "due": obj.get("due"),
            "line": obj.get("line"),
            "createdFrom": obj.get("createdFrom"),
            "currency": obj.get("currency"),
            "type": obj.get("type"),
            "refName": obj.get("refName"),
            "doc": NsResource.from_dict(obj["doc"]) if obj.get("doc") is not None else None
        })
        return _obj


