# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-01 at 22:32:31 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NsErrorOErrorDetailsInner(BaseModel):
    """
    NsErrorOErrorDetailsInner
    """ # noqa: E501
    detail: Optional[StrictStr] = Field(default=None, description="A detailed, human-readable description of the problem occurrence.")
    o_error_path: Optional[StrictStr] = Field(default=None, description="The JSON path that indicates where the problem occurs within the request body.", alias="o:errorPath")
    o_error_url: Optional[StrictStr] = Field(default=None, description="The URI of the first element in the request URL where the problem occurs.", alias="o:errorUrl")
    o_error_header: Optional[StrictStr] = Field(default=None, description="The name of the HTTP header where the problem occurs.", alias="o:errorHeader")
    o_error_query_param: Optional[StrictStr] = Field(default=None, description="The name of the query parameter where the problem occurs.", alias="o:errorQueryParam")
    o_error_code: Optional[StrictStr] = Field(default=None, description="The application-specific error code. Similar problem types are grouped together.", alias="o:errorCode")
    __properties: ClassVar[List[str]] = ["detail", "o:errorPath", "o:errorUrl", "o:errorHeader", "o:errorQueryParam", "o:errorCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NsErrorOErrorDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "detail",
            "o_error_path",
            "o_error_url",
            "o_error_header",
            "o_error_query_param",
            "o_error_code",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NsErrorOErrorDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detail": obj.get("detail"),
            "o:errorPath": obj.get("o:errorPath"),
            "o:errorUrl": obj.get("o:errorUrl"),
            "o:errorHeader": obj.get("o:errorHeader"),
            "o:errorQueryParam": obj.get("o:errorQueryParam"),
            "o:errorCode": obj.get("o:errorCode")
        })
        return _obj


