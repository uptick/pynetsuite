# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-02 at 01:07:42 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynetsuite.models.ns_error_o_error_details_inner import NsErrorOErrorDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class NsError(BaseModel):
    """
    NsError
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="A URI reference to the documentation about the problem type.")
    title: Optional[StrictStr] = Field(default=None, description="A human-readable description of the problem type.")
    status: Optional[StrictInt] = Field(default=None, description="The HTTP status code generated by the server the request originates from.")
    o_error_details: Optional[List[NsErrorOErrorDetailsInner]] = Field(default=None, description="An array containing one or more problem types.", alias="o:errorDetails")
    __properties: ClassVar[List[str]] = ["type", "title", "status", "o:errorDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NsError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "type",
            "title",
            "status",
            "o_error_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in o_error_details (list)
        _items = []
        if self.o_error_details:
            for _item_o_error_details in self.o_error_details:
                if _item_o_error_details:
                    _items.append(_item_o_error_details.to_dict())
            _dict['o:errorDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NsError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "status": obj.get("status"),
            "o:errorDetails": [NsErrorOErrorDetailsInner.from_dict(_item) for _item in obj["o:errorDetails"]] if obj.get("o:errorDetails") is not None else None
        })
        return _obj


