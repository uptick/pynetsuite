# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-02 at 01:07:42 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pynetsuite.models.account import Account
from pynetsuite.models.credit_memo_item_element_cost_estimate_type import CreditMemoItemElementCostEstimateType
from pynetsuite.models.credit_memo_item_element_vsoe_permit_discount import CreditMemoItemElementVsoePermitDiscount
from pynetsuite.models.credit_memo_item_element_vsoe_sop_group import CreditMemoItemElementVsoeSOPGroup
from pynetsuite.models.customer import Customer
from pynetsuite.models.invoice_exp_cost_element_custcol_zc_item_type import InvoiceExpCostElementCustcolZcItemType
from pynetsuite.models.invoice_item_cost_element_item import InvoiceItemCostElementItem
from pynetsuite.models.invoice_item_inventory_detail import InvoiceItemInventoryDetail
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from pynetsuite.models.sales_tax_item import SalesTaxItem
from pynetsuite.models.vendor import Vendor
from pynetsuite.models.vendor_bill_item_element_bill_variance_status import VendorBillItemElementBillVarianceStatus
from pynetsuite.models.vendor_bill_item_element_item_subtype import VendorBillItemElementItemSubtype
from typing import Optional, Set
from typing_extensions import Self

class InvoiceItemElement(BaseModel):
    """
    InvoiceItemElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    custcol_prj_order_line: Optional[StrictStr] = None
    rate_schedule: Optional[StrictStr] = Field(default=None, alias="rateSchedule")
    custcol_vl_item_display_name: Optional[StrictStr] = None
    custcol_nxc_end_check: Optional[StrictBool] = None
    custcol_msl_sitemgtcost: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_5892_eutriangulation: Optional[StrictBool] = None
    options: Optional[StrictStr] = None
    quantity_on_hand: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantityOnHand")
    custcol_4601_witaxbaseamount: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_vl_description_print: Optional[StrictStr] = None
    cost_estimate_type: Optional[CreditMemoItemElementCostEstimateType] = Field(default=None, alias="costEstimateType")
    custcol_nx_time_start: Optional[Annotated[str, Field(strict=True)]] = None
    custcol_bb1_margin: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_country_of_origin_name: Optional[StrictStr] = None
    vsoe_allocation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vsoeAllocation")
    custcol_4601_witaxbamt_exp: Optional[Union[StrictFloat, StrictInt]] = None
    custcolcostcentre: Optional[StrictStr] = None
    est_gross_profit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estGrossProfit")
    bill_variance_status: Optional[VendorBillItemElementBillVarianceStatus] = Field(default=None, alias="billVarianceStatus")
    custcol_zc_3wm_matching_id: Optional[StrictStr] = None
    custcol_vl_unique_asset_code: Optional[StrictStr] = None
    custcol_nx_time_end: Optional[Annotated[str, Field(strict=True)]] = None
    custcol_4601_witaxamount: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_msl_materialcost: Optional[Union[StrictFloat, StrictInt]] = None
    est_gross_profit_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="estGrossProfitPercent")
    custcol_cs_estimate_quote_ref: Optional[StrictStr] = None
    custcol_nx_time_billed: Optional[StrictBool] = None
    custcol_vl_linked_transaction_line: Optional[StrictStr] = None
    custcol_adjustment_field: Optional[StrictStr] = None
    custcol_country_of_origin_code: Optional[StrictStr] = None
    exclude_from_rate_request: Optional[StrictBool] = Field(default=None, alias="excludeFromRateRequest")
    custcol_re_work_re_order_check: Optional[StrictBool] = None
    linked: Optional[StrictBool] = None
    custcol_day_rate: Optional[StrictBool] = None
    custcol_counterparty_vat: Optional[StrictStr] = None
    custcol_4601_witaxline: Optional[StrictStr] = None
    custcol_other_rate: Optional[StrictBool] = None
    custcol_bb1_temp_itemdisplay: Optional[StrictStr] = None
    custcol_reference: Optional[StrictStr] = None
    custcol_zc_item_type: Optional[InvoiceExpCostElementCustcolZcItemType] = None
    processed_by_rev_commit: Optional[StrictBool] = Field(default=None, alias="processedByRevCommit")
    custcol_msl_prelicost: Optional[Union[StrictFloat, StrictInt]] = None
    vsoe_delivered: Optional[StrictBool] = Field(default=None, alias="vsoeDelivered")
    custcol_quote_reference: Optional[StrictStr] = None
    quantity_available: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantityAvailable")
    revrec_recurrencetype: Optional[StrictStr] = None
    vsoe_is_estimate: Optional[StrictBool] = Field(default=None, alias="vsoeIsEstimate")
    custcol_nx_idempotency_key: Optional[StrictStr] = None
    custcol_bb1_fp_calculation_completed: Optional[StrictBool] = None
    custcol_nx_time_costed: Optional[StrictBool] = None
    custcol_4601_witaxrate: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_cs_estimate_add_notes: Optional[StrictStr] = None
    custcol_internal_notes: Optional[StrictStr] = None
    vsoe_permit_discount: Optional[CreditMemoItemElementVsoePermitDiscount] = Field(default=None, alias="vsoePermitDiscount")
    quantity_committed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="quantityCommitted")
    custcol_statistical_value: Optional[Union[StrictFloat, StrictInt]] = None
    custcol3: Optional[StrictStr] = None
    custcol4: Optional[StrictStr] = None
    oqp_bucket: Optional[StrictStr] = Field(default=None, alias="oqpBucket")
    vsoe_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vsoeAmount")
    item_subtype: Optional[VendorBillItemElementItemSubtype] = Field(default=None, alias="itemSubtype")
    custcol_4601_witaxamt_exp: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_ff_sc_po_line: Optional[StrictInt] = None
    custcol_ph4014_src_tranintid: Optional[StrictStr] = None
    custcol_description_location: Optional[StrictStr] = None
    custcol_mark_as_optional: Optional[StrictBool] = None
    matrix_type: Optional[StrictStr] = Field(default=None, alias="matrixType")
    custcol_4601_witaxrate_exp: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_msl_labourcost: Optional[Union[StrictFloat, StrictInt]] = None
    is_open: Optional[StrictBool] = Field(default=None, alias="isOpen")
    line: Optional[StrictInt] = None
    description: Optional[StrictStr] = None
    is_closed: Optional[StrictBool] = Field(default=None, alias="isClosed")
    units: Optional[StrictStr] = None
    custcol_statistical_value_base_curr: Optional[Union[StrictFloat, StrictInt]] = None
    vsoe_sop_group: Optional[CreditMemoItemElementVsoeSOPGroup] = Field(default=None, alias="vsoeSOPGroup")
    custcol_nx_foreignamount: Optional[Union[StrictFloat, StrictInt]] = None
    rate: Optional[Union[StrictFloat, StrictInt]] = None
    marginal: Optional[StrictBool] = None
    cost_estimate_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="costEstimateRate")
    min_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minQty")
    custcol_nx_time_cost: Optional[Union[StrictFloat, StrictInt]] = None
    print_items: Optional[StrictBool] = Field(default=None, alias="printItems")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    init_oqp_bucket: Optional[StrictStr] = Field(default=None, alias="initOqpBucket")
    custcol_zc_vendor_txn_idx: Optional[StrictInt] = None
    custcol_zc_3wm_matching_summary: Optional[StrictStr] = None
    custcol_nxc_end_time: Optional[Annotated[str, Field(strict=True)]] = None
    vsoe_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="vsoePrice")
    custcol_4601_witaxapplies: Optional[StrictBool] = None
    order_line: Optional[StrictInt] = Field(default=None, alias="orderLine")
    custcol_nxc_start_time: Optional[Annotated[str, Field(strict=True)]] = None
    item_type: Optional[InvoiceExpCostElementCustcolZcItemType] = Field(default=None, alias="itemType")
    custcol_ff_sc_matching_status_inline: Optional[StrictStr] = None
    custcol_bb1_ventro_fp_orig_rate: Optional[Union[StrictFloat, StrictInt]] = None
    cost_estimate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="costEstimate")
    custcol_bb1_targetmarginline: Optional[Union[StrictFloat, StrictInt]] = None
    custcol_nxc_start_check: Optional[StrictBool] = None
    custcol_4601_witaxline_exp: Optional[StrictStr] = None
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    custcol_ff_sc_po_id: Optional[NsResource] = None
    custcol_statistical_procedure_purc: Optional[NsResource] = None
    custcolprojectframeworkprovider: Optional[NsResource] = None
    custcol_vl_tax_code_print: Optional[SalesTaxItem] = None
    var_class: Optional[NsResource] = Field(default=None, alias="class")
    custcol_ff_sc_matching_status: Optional[NsResource] = None
    custcolpmschedulerline: Optional[NsResource] = None
    custcol_expense_code_of_supply: Optional[NsResource] = None
    cseg_paactivitycode: Optional[NsResource] = None
    custcol_adjustment_tax_code: Optional[SalesTaxItem] = None
    custcolprojectqsline: Optional[NsResource] = None
    custcol_nx_asset: Optional[NsResource] = None
    inventory_detail: Optional[InvoiceItemInventoryDetail] = Field(default=None, alias="inventoryDetail")
    custcol_nature_of_transaction_codes: Optional[NsResource] = None
    custcol_nx_projecttask: Optional[NsResource] = None
    custcolrequestorline: Optional[NsResource] = None
    account: Optional[Account] = None
    custcol_sales_consultant_line: Optional[NsResource] = None
    custcol_bb1_suiteprojects_project_lin: Optional[NsResource] = None
    price: Optional[NsResource] = None
    custcol_subcontractor: Optional[Vendor] = None
    custcol_nx_consumable: Optional[NsResource] = None
    subsidiary: Optional[NsResource] = None
    custcol_ph4014_src_vendorid: Optional[Vendor] = None
    custcol_ph4014_src_empid: Optional[NsResource] = None
    custcol_ph4014_src_custid: Optional[Customer] = None
    department: Optional[NsResource] = None
    custcol_ff_sc_vatex_reason: Optional[NsResource] = None
    custcol_4601_witaxcode: Optional[NsResource] = None
    custcol_4601_witaxcode_exp: Optional[NsResource] = None
    custcol_nxc_case: Optional[NsResource] = None
    custcol_nx_task: Optional[NsResource] = None
    custcol_bb1_labour_type: Optional[NsResource] = None
    custcol_nondeductible_account: Optional[Account] = None
    custcol_statistical_procedure_sale: Optional[NsResource] = None
    item: Optional[InvoiceItemCostElementItem] = None
    custcol_emirate: Optional[NsResource] = None
    custcol_bb1_vehicle_expense: Optional[NsResource] = None
    charge_type: Optional[NsResource] = Field(default=None, alias="chargeType")
    custcol_vl_linked_transaction: Optional[NsResource] = None
    location: Optional[NsResource] = None
    custcol_4601_itemdefaultwitaxcode: Optional[NsResource] = None
    custcol_ph4014_src_jrnltrantypeid: Optional[NsResource] = None
    custcol_nx_case: Optional[NsResource] = None
    cseg_accreditations: Optional[NsResource] = None
    custcol_pocase: Optional[NsResource] = None
    order_doc: Optional[NsResource] = Field(default=None, alias="orderDoc")
    custcol_ff_sc_ammr_rule_applied: Optional[NsResource] = None
    __properties: ClassVar[List[str]] = ["links", "custcol_prj_order_line", "rateSchedule", "custcol_vl_item_display_name", "custcol_nxc_end_check", "custcol_msl_sitemgtcost", "custcol_5892_eutriangulation", "options", "quantityOnHand", "custcol_4601_witaxbaseamount", "custcol_vl_description_print", "costEstimateType", "custcol_nx_time_start", "custcol_bb1_margin", "custcol_country_of_origin_name", "vsoeAllocation", "custcol_4601_witaxbamt_exp", "custcolcostcentre", "estGrossProfit", "billVarianceStatus", "custcol_zc_3wm_matching_id", "custcol_vl_unique_asset_code", "custcol_nx_time_end", "custcol_4601_witaxamount", "custcol_msl_materialcost", "estGrossProfitPercent", "custcol_cs_estimate_quote_ref", "custcol_nx_time_billed", "custcol_vl_linked_transaction_line", "custcol_adjustment_field", "custcol_country_of_origin_code", "excludeFromRateRequest", "custcol_re_work_re_order_check", "linked", "custcol_day_rate", "custcol_counterparty_vat", "custcol_4601_witaxline", "custcol_other_rate", "custcol_bb1_temp_itemdisplay", "custcol_reference", "custcol_zc_item_type", "processedByRevCommit", "custcol_msl_prelicost", "vsoeDelivered", "custcol_quote_reference", "quantityAvailable", "revrec_recurrencetype", "vsoeIsEstimate", "custcol_nx_idempotency_key", "custcol_bb1_fp_calculation_completed", "custcol_nx_time_costed", "custcol_4601_witaxrate", "custcol_cs_estimate_add_notes", "custcol_internal_notes", "vsoePermitDiscount", "quantityCommitted", "custcol_statistical_value", "custcol3", "custcol4", "oqpBucket", "vsoeAmount", "itemSubtype", "custcol_4601_witaxamt_exp", "custcol_ff_sc_po_line", "custcol_ph4014_src_tranintid", "custcol_description_location", "custcol_mark_as_optional", "matrixType", "custcol_4601_witaxrate_exp", "custcol_msl_labourcost", "isOpen", "line", "description", "isClosed", "units", "custcol_statistical_value_base_curr", "vsoeSOPGroup", "custcol_nx_foreignamount", "rate", "marginal", "costEstimateRate", "minQty", "custcol_nx_time_cost", "printItems", "amount", "quantity", "initOqpBucket", "custcol_zc_vendor_txn_idx", "custcol_zc_3wm_matching_summary", "custcol_nxc_end_time", "vsoePrice", "custcol_4601_witaxapplies", "orderLine", "custcol_nxc_start_time", "itemType", "custcol_ff_sc_matching_status_inline", "custcol_bb1_ventro_fp_orig_rate", "costEstimate", "custcol_bb1_targetmarginline", "custcol_nxc_start_check", "custcol_4601_witaxline_exp", "refName", "custcol_ff_sc_po_id", "custcol_statistical_procedure_purc", "custcolprojectframeworkprovider", "custcol_vl_tax_code_print", "class", "custcol_ff_sc_matching_status", "custcolpmschedulerline", "custcol_expense_code_of_supply", "cseg_paactivitycode", "custcol_adjustment_tax_code", "custcolprojectqsline", "custcol_nx_asset", "inventoryDetail", "custcol_nature_of_transaction_codes", "custcol_nx_projecttask", "custcolrequestorline", "account", "custcol_sales_consultant_line", "custcol_bb1_suiteprojects_project_lin", "price", "custcol_subcontractor", "custcol_nx_consumable", "subsidiary", "custcol_ph4014_src_vendorid", "custcol_ph4014_src_empid", "custcol_ph4014_src_custid", "department", "custcol_ff_sc_vatex_reason", "custcol_4601_witaxcode", "custcol_4601_witaxcode_exp", "custcol_nxc_case", "custcol_nx_task", "custcol_bb1_labour_type", "custcol_nondeductible_account", "custcol_statistical_procedure_sale", "item", "custcol_emirate", "custcol_bb1_vehicle_expense", "chargeType", "custcol_vl_linked_transaction", "location", "custcol_4601_itemdefaultwitaxcode", "custcol_ph4014_src_jrnltrantypeid", "custcol_nx_case", "cseg_accreditations", "custcol_pocase", "orderDoc", "custcol_ff_sc_ammr_rule_applied"]

    @field_validator('custcol_nx_time_start')
    def custcol_nx_time_start_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/")
        return value

    @field_validator('custcol_nx_time_end')
    def custcol_nx_time_end_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/")
        return value

    @field_validator('custcol_nxc_end_time')
    def custcol_nxc_end_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/")
        return value

    @field_validator('custcol_nxc_start_time')
    def custcol_nxc_start_time_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceItemElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of cost_estimate_type
        if self.cost_estimate_type:
            _dict['costEstimateType'] = self.cost_estimate_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_variance_status
        if self.bill_variance_status:
            _dict['billVarianceStatus'] = self.bill_variance_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_zc_item_type
        if self.custcol_zc_item_type:
            _dict['custcol_zc_item_type'] = self.custcol_zc_item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vsoe_permit_discount
        if self.vsoe_permit_discount:
            _dict['vsoePermitDiscount'] = self.vsoe_permit_discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_subtype
        if self.item_subtype:
            _dict['itemSubtype'] = self.item_subtype.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vsoe_sop_group
        if self.vsoe_sop_group:
            _dict['vsoeSOPGroup'] = self.vsoe_sop_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_type
        if self.item_type:
            _dict['itemType'] = self.item_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ff_sc_po_id
        if self.custcol_ff_sc_po_id:
            _dict['custcol_ff_sc_po_id'] = self.custcol_ff_sc_po_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_statistical_procedure_purc
        if self.custcol_statistical_procedure_purc:
            _dict['custcol_statistical_procedure_purc'] = self.custcol_statistical_procedure_purc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcolprojectframeworkprovider
        if self.custcolprojectframeworkprovider:
            _dict['custcolprojectframeworkprovider'] = self.custcolprojectframeworkprovider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_vl_tax_code_print
        if self.custcol_vl_tax_code_print:
            _dict['custcol_vl_tax_code_print'] = self.custcol_vl_tax_code_print.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_class
        if self.var_class:
            _dict['class'] = self.var_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ff_sc_matching_status
        if self.custcol_ff_sc_matching_status:
            _dict['custcol_ff_sc_matching_status'] = self.custcol_ff_sc_matching_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcolpmschedulerline
        if self.custcolpmschedulerline:
            _dict['custcolpmschedulerline'] = self.custcolpmschedulerline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_expense_code_of_supply
        if self.custcol_expense_code_of_supply:
            _dict['custcol_expense_code_of_supply'] = self.custcol_expense_code_of_supply.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cseg_paactivitycode
        if self.cseg_paactivitycode:
            _dict['cseg_paactivitycode'] = self.cseg_paactivitycode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_adjustment_tax_code
        if self.custcol_adjustment_tax_code:
            _dict['custcol_adjustment_tax_code'] = self.custcol_adjustment_tax_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcolprojectqsline
        if self.custcolprojectqsline:
            _dict['custcolprojectqsline'] = self.custcolprojectqsline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nx_asset
        if self.custcol_nx_asset:
            _dict['custcol_nx_asset'] = self.custcol_nx_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_detail
        if self.inventory_detail:
            _dict['inventoryDetail'] = self.inventory_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nature_of_transaction_codes
        if self.custcol_nature_of_transaction_codes:
            _dict['custcol_nature_of_transaction_codes'] = self.custcol_nature_of_transaction_codes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nx_projecttask
        if self.custcol_nx_projecttask:
            _dict['custcol_nx_projecttask'] = self.custcol_nx_projecttask.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcolrequestorline
        if self.custcolrequestorline:
            _dict['custcolrequestorline'] = self.custcolrequestorline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_sales_consultant_line
        if self.custcol_sales_consultant_line:
            _dict['custcol_sales_consultant_line'] = self.custcol_sales_consultant_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_bb1_suiteprojects_project_lin
        if self.custcol_bb1_suiteprojects_project_lin:
            _dict['custcol_bb1_suiteprojects_project_lin'] = self.custcol_bb1_suiteprojects_project_lin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_subcontractor
        if self.custcol_subcontractor:
            _dict['custcol_subcontractor'] = self.custcol_subcontractor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nx_consumable
        if self.custcol_nx_consumable:
            _dict['custcol_nx_consumable'] = self.custcol_nx_consumable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subsidiary
        if self.subsidiary:
            _dict['subsidiary'] = self.subsidiary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ph4014_src_vendorid
        if self.custcol_ph4014_src_vendorid:
            _dict['custcol_ph4014_src_vendorid'] = self.custcol_ph4014_src_vendorid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ph4014_src_empid
        if self.custcol_ph4014_src_empid:
            _dict['custcol_ph4014_src_empid'] = self.custcol_ph4014_src_empid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ph4014_src_custid
        if self.custcol_ph4014_src_custid:
            _dict['custcol_ph4014_src_custid'] = self.custcol_ph4014_src_custid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ff_sc_vatex_reason
        if self.custcol_ff_sc_vatex_reason:
            _dict['custcol_ff_sc_vatex_reason'] = self.custcol_ff_sc_vatex_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_4601_witaxcode
        if self.custcol_4601_witaxcode:
            _dict['custcol_4601_witaxcode'] = self.custcol_4601_witaxcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_4601_witaxcode_exp
        if self.custcol_4601_witaxcode_exp:
            _dict['custcol_4601_witaxcode_exp'] = self.custcol_4601_witaxcode_exp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nxc_case
        if self.custcol_nxc_case:
            _dict['custcol_nxc_case'] = self.custcol_nxc_case.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nx_task
        if self.custcol_nx_task:
            _dict['custcol_nx_task'] = self.custcol_nx_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_bb1_labour_type
        if self.custcol_bb1_labour_type:
            _dict['custcol_bb1_labour_type'] = self.custcol_bb1_labour_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nondeductible_account
        if self.custcol_nondeductible_account:
            _dict['custcol_nondeductible_account'] = self.custcol_nondeductible_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_statistical_procedure_sale
        if self.custcol_statistical_procedure_sale:
            _dict['custcol_statistical_procedure_sale'] = self.custcol_statistical_procedure_sale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item
        if self.item:
            _dict['item'] = self.item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_emirate
        if self.custcol_emirate:
            _dict['custcol_emirate'] = self.custcol_emirate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_bb1_vehicle_expense
        if self.custcol_bb1_vehicle_expense:
            _dict['custcol_bb1_vehicle_expense'] = self.custcol_bb1_vehicle_expense.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_type
        if self.charge_type:
            _dict['chargeType'] = self.charge_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_vl_linked_transaction
        if self.custcol_vl_linked_transaction:
            _dict['custcol_vl_linked_transaction'] = self.custcol_vl_linked_transaction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_4601_itemdefaultwitaxcode
        if self.custcol_4601_itemdefaultwitaxcode:
            _dict['custcol_4601_itemdefaultwitaxcode'] = self.custcol_4601_itemdefaultwitaxcode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ph4014_src_jrnltrantypeid
        if self.custcol_ph4014_src_jrnltrantypeid:
            _dict['custcol_ph4014_src_jrnltrantypeid'] = self.custcol_ph4014_src_jrnltrantypeid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_nx_case
        if self.custcol_nx_case:
            _dict['custcol_nx_case'] = self.custcol_nx_case.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cseg_accreditations
        if self.cseg_accreditations:
            _dict['cseg_accreditations'] = self.cseg_accreditations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_pocase
        if self.custcol_pocase:
            _dict['custcol_pocase'] = self.custcol_pocase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_doc
        if self.order_doc:
            _dict['orderDoc'] = self.order_doc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custcol_ff_sc_ammr_rule_applied
        if self.custcol_ff_sc_ammr_rule_applied:
            _dict['custcol_ff_sc_ammr_rule_applied'] = self.custcol_ff_sc_ammr_rule_applied.to_dict()
        # set to None if custcol_prj_order_line (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_prj_order_line is None and "custcol_prj_order_line" in self.model_fields_set:
            _dict['custcol_prj_order_line'] = None

        # set to None if rate_schedule (nullable) is None
        # and model_fields_set contains the field
        if self.rate_schedule is None and "rate_schedule" in self.model_fields_set:
            _dict['rateSchedule'] = None

        # set to None if custcol_vl_item_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_vl_item_display_name is None and "custcol_vl_item_display_name" in self.model_fields_set:
            _dict['custcol_vl_item_display_name'] = None

        # set to None if custcol_msl_sitemgtcost (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_msl_sitemgtcost is None and "custcol_msl_sitemgtcost" in self.model_fields_set:
            _dict['custcol_msl_sitemgtcost'] = None

        # set to None if options (nullable) is None
        # and model_fields_set contains the field
        if self.options is None and "options" in self.model_fields_set:
            _dict['options'] = None

        # set to None if quantity_on_hand (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_on_hand is None and "quantity_on_hand" in self.model_fields_set:
            _dict['quantityOnHand'] = None

        # set to None if custcol_4601_witaxbaseamount (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxbaseamount is None and "custcol_4601_witaxbaseamount" in self.model_fields_set:
            _dict['custcol_4601_witaxbaseamount'] = None

        # set to None if custcol_vl_description_print (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_vl_description_print is None and "custcol_vl_description_print" in self.model_fields_set:
            _dict['custcol_vl_description_print'] = None

        # set to None if custcol_nx_time_start (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nx_time_start is None and "custcol_nx_time_start" in self.model_fields_set:
            _dict['custcol_nx_time_start'] = None

        # set to None if custcol_bb1_margin (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_bb1_margin is None and "custcol_bb1_margin" in self.model_fields_set:
            _dict['custcol_bb1_margin'] = None

        # set to None if custcol_country_of_origin_name (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_country_of_origin_name is None and "custcol_country_of_origin_name" in self.model_fields_set:
            _dict['custcol_country_of_origin_name'] = None

        # set to None if vsoe_allocation (nullable) is None
        # and model_fields_set contains the field
        if self.vsoe_allocation is None and "vsoe_allocation" in self.model_fields_set:
            _dict['vsoeAllocation'] = None

        # set to None if custcol_4601_witaxbamt_exp (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxbamt_exp is None and "custcol_4601_witaxbamt_exp" in self.model_fields_set:
            _dict['custcol_4601_witaxbamt_exp'] = None

        # set to None if custcolcostcentre (nullable) is None
        # and model_fields_set contains the field
        if self.custcolcostcentre is None and "custcolcostcentre" in self.model_fields_set:
            _dict['custcolcostcentre'] = None

        # set to None if est_gross_profit (nullable) is None
        # and model_fields_set contains the field
        if self.est_gross_profit is None and "est_gross_profit" in self.model_fields_set:
            _dict['estGrossProfit'] = None

        # set to None if custcol_zc_3wm_matching_id (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_zc_3wm_matching_id is None and "custcol_zc_3wm_matching_id" in self.model_fields_set:
            _dict['custcol_zc_3wm_matching_id'] = None

        # set to None if custcol_vl_unique_asset_code (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_vl_unique_asset_code is None and "custcol_vl_unique_asset_code" in self.model_fields_set:
            _dict['custcol_vl_unique_asset_code'] = None

        # set to None if custcol_nx_time_end (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nx_time_end is None and "custcol_nx_time_end" in self.model_fields_set:
            _dict['custcol_nx_time_end'] = None

        # set to None if custcol_4601_witaxamount (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxamount is None and "custcol_4601_witaxamount" in self.model_fields_set:
            _dict['custcol_4601_witaxamount'] = None

        # set to None if custcol_msl_materialcost (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_msl_materialcost is None and "custcol_msl_materialcost" in self.model_fields_set:
            _dict['custcol_msl_materialcost'] = None

        # set to None if est_gross_profit_percent (nullable) is None
        # and model_fields_set contains the field
        if self.est_gross_profit_percent is None and "est_gross_profit_percent" in self.model_fields_set:
            _dict['estGrossProfitPercent'] = None

        # set to None if custcol_cs_estimate_quote_ref (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_cs_estimate_quote_ref is None and "custcol_cs_estimate_quote_ref" in self.model_fields_set:
            _dict['custcol_cs_estimate_quote_ref'] = None

        # set to None if custcol_vl_linked_transaction_line (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_vl_linked_transaction_line is None and "custcol_vl_linked_transaction_line" in self.model_fields_set:
            _dict['custcol_vl_linked_transaction_line'] = None

        # set to None if custcol_adjustment_field (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_adjustment_field is None and "custcol_adjustment_field" in self.model_fields_set:
            _dict['custcol_adjustment_field'] = None

        # set to None if custcol_country_of_origin_code (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_country_of_origin_code is None and "custcol_country_of_origin_code" in self.model_fields_set:
            _dict['custcol_country_of_origin_code'] = None

        # set to None if custcol_counterparty_vat (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_counterparty_vat is None and "custcol_counterparty_vat" in self.model_fields_set:
            _dict['custcol_counterparty_vat'] = None

        # set to None if custcol_4601_witaxline (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxline is None and "custcol_4601_witaxline" in self.model_fields_set:
            _dict['custcol_4601_witaxline'] = None

        # set to None if custcol_bb1_temp_itemdisplay (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_bb1_temp_itemdisplay is None and "custcol_bb1_temp_itemdisplay" in self.model_fields_set:
            _dict['custcol_bb1_temp_itemdisplay'] = None

        # set to None if custcol_reference (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_reference is None and "custcol_reference" in self.model_fields_set:
            _dict['custcol_reference'] = None

        # set to None if custcol_msl_prelicost (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_msl_prelicost is None and "custcol_msl_prelicost" in self.model_fields_set:
            _dict['custcol_msl_prelicost'] = None

        # set to None if custcol_quote_reference (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_quote_reference is None and "custcol_quote_reference" in self.model_fields_set:
            _dict['custcol_quote_reference'] = None

        # set to None if quantity_available (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_available is None and "quantity_available" in self.model_fields_set:
            _dict['quantityAvailable'] = None

        # set to None if revrec_recurrencetype (nullable) is None
        # and model_fields_set contains the field
        if self.revrec_recurrencetype is None and "revrec_recurrencetype" in self.model_fields_set:
            _dict['revrec_recurrencetype'] = None

        # set to None if custcol_nx_idempotency_key (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nx_idempotency_key is None and "custcol_nx_idempotency_key" in self.model_fields_set:
            _dict['custcol_nx_idempotency_key'] = None

        # set to None if custcol_4601_witaxrate (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxrate is None and "custcol_4601_witaxrate" in self.model_fields_set:
            _dict['custcol_4601_witaxrate'] = None

        # set to None if custcol_cs_estimate_add_notes (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_cs_estimate_add_notes is None and "custcol_cs_estimate_add_notes" in self.model_fields_set:
            _dict['custcol_cs_estimate_add_notes'] = None

        # set to None if custcol_internal_notes (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_internal_notes is None and "custcol_internal_notes" in self.model_fields_set:
            _dict['custcol_internal_notes'] = None

        # set to None if quantity_committed (nullable) is None
        # and model_fields_set contains the field
        if self.quantity_committed is None and "quantity_committed" in self.model_fields_set:
            _dict['quantityCommitted'] = None

        # set to None if custcol_statistical_value (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_statistical_value is None and "custcol_statistical_value" in self.model_fields_set:
            _dict['custcol_statistical_value'] = None

        # set to None if custcol3 (nullable) is None
        # and model_fields_set contains the field
        if self.custcol3 is None and "custcol3" in self.model_fields_set:
            _dict['custcol3'] = None

        # set to None if custcol4 (nullable) is None
        # and model_fields_set contains the field
        if self.custcol4 is None and "custcol4" in self.model_fields_set:
            _dict['custcol4'] = None

        # set to None if oqp_bucket (nullable) is None
        # and model_fields_set contains the field
        if self.oqp_bucket is None and "oqp_bucket" in self.model_fields_set:
            _dict['oqpBucket'] = None

        # set to None if vsoe_amount (nullable) is None
        # and model_fields_set contains the field
        if self.vsoe_amount is None and "vsoe_amount" in self.model_fields_set:
            _dict['vsoeAmount'] = None

        # set to None if custcol_4601_witaxamt_exp (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxamt_exp is None and "custcol_4601_witaxamt_exp" in self.model_fields_set:
            _dict['custcol_4601_witaxamt_exp'] = None

        # set to None if custcol_ff_sc_po_line (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_ff_sc_po_line is None and "custcol_ff_sc_po_line" in self.model_fields_set:
            _dict['custcol_ff_sc_po_line'] = None

        # set to None if custcol_ph4014_src_tranintid (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_ph4014_src_tranintid is None and "custcol_ph4014_src_tranintid" in self.model_fields_set:
            _dict['custcol_ph4014_src_tranintid'] = None

        # set to None if custcol_description_location (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_description_location is None and "custcol_description_location" in self.model_fields_set:
            _dict['custcol_description_location'] = None

        # set to None if matrix_type (nullable) is None
        # and model_fields_set contains the field
        if self.matrix_type is None and "matrix_type" in self.model_fields_set:
            _dict['matrixType'] = None

        # set to None if custcol_4601_witaxrate_exp (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxrate_exp is None and "custcol_4601_witaxrate_exp" in self.model_fields_set:
            _dict['custcol_4601_witaxrate_exp'] = None

        # set to None if custcol_msl_labourcost (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_msl_labourcost is None and "custcol_msl_labourcost" in self.model_fields_set:
            _dict['custcol_msl_labourcost'] = None

        # set to None if line (nullable) is None
        # and model_fields_set contains the field
        if self.line is None and "line" in self.model_fields_set:
            _dict['line'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if units (nullable) is None
        # and model_fields_set contains the field
        if self.units is None and "units" in self.model_fields_set:
            _dict['units'] = None

        # set to None if custcol_statistical_value_base_curr (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_statistical_value_base_curr is None and "custcol_statistical_value_base_curr" in self.model_fields_set:
            _dict['custcol_statistical_value_base_curr'] = None

        # set to None if custcol_nx_foreignamount (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nx_foreignamount is None and "custcol_nx_foreignamount" in self.model_fields_set:
            _dict['custcol_nx_foreignamount'] = None

        # set to None if rate (nullable) is None
        # and model_fields_set contains the field
        if self.rate is None and "rate" in self.model_fields_set:
            _dict['rate'] = None

        # set to None if cost_estimate_rate (nullable) is None
        # and model_fields_set contains the field
        if self.cost_estimate_rate is None and "cost_estimate_rate" in self.model_fields_set:
            _dict['costEstimateRate'] = None

        # set to None if min_qty (nullable) is None
        # and model_fields_set contains the field
        if self.min_qty is None and "min_qty" in self.model_fields_set:
            _dict['minQty'] = None

        # set to None if custcol_nx_time_cost (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nx_time_cost is None and "custcol_nx_time_cost" in self.model_fields_set:
            _dict['custcol_nx_time_cost'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if init_oqp_bucket (nullable) is None
        # and model_fields_set contains the field
        if self.init_oqp_bucket is None and "init_oqp_bucket" in self.model_fields_set:
            _dict['initOqpBucket'] = None

        # set to None if custcol_zc_vendor_txn_idx (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_zc_vendor_txn_idx is None and "custcol_zc_vendor_txn_idx" in self.model_fields_set:
            _dict['custcol_zc_vendor_txn_idx'] = None

        # set to None if custcol_zc_3wm_matching_summary (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_zc_3wm_matching_summary is None and "custcol_zc_3wm_matching_summary" in self.model_fields_set:
            _dict['custcol_zc_3wm_matching_summary'] = None

        # set to None if custcol_nxc_end_time (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nxc_end_time is None and "custcol_nxc_end_time" in self.model_fields_set:
            _dict['custcol_nxc_end_time'] = None

        # set to None if vsoe_price (nullable) is None
        # and model_fields_set contains the field
        if self.vsoe_price is None and "vsoe_price" in self.model_fields_set:
            _dict['vsoePrice'] = None

        # set to None if order_line (nullable) is None
        # and model_fields_set contains the field
        if self.order_line is None and "order_line" in self.model_fields_set:
            _dict['orderLine'] = None

        # set to None if custcol_nxc_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_nxc_start_time is None and "custcol_nxc_start_time" in self.model_fields_set:
            _dict['custcol_nxc_start_time'] = None

        # set to None if custcol_ff_sc_matching_status_inline (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_ff_sc_matching_status_inline is None and "custcol_ff_sc_matching_status_inline" in self.model_fields_set:
            _dict['custcol_ff_sc_matching_status_inline'] = None

        # set to None if custcol_bb1_ventro_fp_orig_rate (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_bb1_ventro_fp_orig_rate is None and "custcol_bb1_ventro_fp_orig_rate" in self.model_fields_set:
            _dict['custcol_bb1_ventro_fp_orig_rate'] = None

        # set to None if cost_estimate (nullable) is None
        # and model_fields_set contains the field
        if self.cost_estimate is None and "cost_estimate" in self.model_fields_set:
            _dict['costEstimate'] = None

        # set to None if custcol_bb1_targetmarginline (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_bb1_targetmarginline is None and "custcol_bb1_targetmarginline" in self.model_fields_set:
            _dict['custcol_bb1_targetmarginline'] = None

        # set to None if custcol_4601_witaxline_exp (nullable) is None
        # and model_fields_set contains the field
        if self.custcol_4601_witaxline_exp is None and "custcol_4601_witaxline_exp" in self.model_fields_set:
            _dict['custcol_4601_witaxline_exp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceItemElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "custcol_prj_order_line": obj.get("custcol_prj_order_line"),
            "rateSchedule": obj.get("rateSchedule"),
            "custcol_vl_item_display_name": obj.get("custcol_vl_item_display_name"),
            "custcol_nxc_end_check": obj.get("custcol_nxc_end_check"),
            "custcol_msl_sitemgtcost": obj.get("custcol_msl_sitemgtcost"),
            "custcol_5892_eutriangulation": obj.get("custcol_5892_eutriangulation"),
            "options": obj.get("options"),
            "quantityOnHand": obj.get("quantityOnHand"),
            "custcol_4601_witaxbaseamount": obj.get("custcol_4601_witaxbaseamount"),
            "custcol_vl_description_print": obj.get("custcol_vl_description_print"),
            "costEstimateType": CreditMemoItemElementCostEstimateType.from_dict(obj["costEstimateType"]) if obj.get("costEstimateType") is not None else None,
            "custcol_nx_time_start": obj.get("custcol_nx_time_start"),
            "custcol_bb1_margin": obj.get("custcol_bb1_margin"),
            "custcol_country_of_origin_name": obj.get("custcol_country_of_origin_name"),
            "vsoeAllocation": obj.get("vsoeAllocation"),
            "custcol_4601_witaxbamt_exp": obj.get("custcol_4601_witaxbamt_exp"),
            "custcolcostcentre": obj.get("custcolcostcentre"),
            "estGrossProfit": obj.get("estGrossProfit"),
            "billVarianceStatus": VendorBillItemElementBillVarianceStatus.from_dict(obj["billVarianceStatus"]) if obj.get("billVarianceStatus") is not None else None,
            "custcol_zc_3wm_matching_id": obj.get("custcol_zc_3wm_matching_id"),
            "custcol_vl_unique_asset_code": obj.get("custcol_vl_unique_asset_code"),
            "custcol_nx_time_end": obj.get("custcol_nx_time_end"),
            "custcol_4601_witaxamount": obj.get("custcol_4601_witaxamount"),
            "custcol_msl_materialcost": obj.get("custcol_msl_materialcost"),
            "estGrossProfitPercent": obj.get("estGrossProfitPercent"),
            "custcol_cs_estimate_quote_ref": obj.get("custcol_cs_estimate_quote_ref"),
            "custcol_nx_time_billed": obj.get("custcol_nx_time_billed"),
            "custcol_vl_linked_transaction_line": obj.get("custcol_vl_linked_transaction_line"),
            "custcol_adjustment_field": obj.get("custcol_adjustment_field"),
            "custcol_country_of_origin_code": obj.get("custcol_country_of_origin_code"),
            "excludeFromRateRequest": obj.get("excludeFromRateRequest"),
            "custcol_re_work_re_order_check": obj.get("custcol_re_work_re_order_check"),
            "linked": obj.get("linked"),
            "custcol_day_rate": obj.get("custcol_day_rate"),
            "custcol_counterparty_vat": obj.get("custcol_counterparty_vat"),
            "custcol_4601_witaxline": obj.get("custcol_4601_witaxline"),
            "custcol_other_rate": obj.get("custcol_other_rate"),
            "custcol_bb1_temp_itemdisplay": obj.get("custcol_bb1_temp_itemdisplay"),
            "custcol_reference": obj.get("custcol_reference"),
            "custcol_zc_item_type": InvoiceExpCostElementCustcolZcItemType.from_dict(obj["custcol_zc_item_type"]) if obj.get("custcol_zc_item_type") is not None else None,
            "processedByRevCommit": obj.get("processedByRevCommit"),
            "custcol_msl_prelicost": obj.get("custcol_msl_prelicost"),
            "vsoeDelivered": obj.get("vsoeDelivered"),
            "custcol_quote_reference": obj.get("custcol_quote_reference"),
            "quantityAvailable": obj.get("quantityAvailable"),
            "revrec_recurrencetype": obj.get("revrec_recurrencetype"),
            "vsoeIsEstimate": obj.get("vsoeIsEstimate"),
            "custcol_nx_idempotency_key": obj.get("custcol_nx_idempotency_key"),
            "custcol_bb1_fp_calculation_completed": obj.get("custcol_bb1_fp_calculation_completed"),
            "custcol_nx_time_costed": obj.get("custcol_nx_time_costed"),
            "custcol_4601_witaxrate": obj.get("custcol_4601_witaxrate"),
            "custcol_cs_estimate_add_notes": obj.get("custcol_cs_estimate_add_notes"),
            "custcol_internal_notes": obj.get("custcol_internal_notes"),
            "vsoePermitDiscount": CreditMemoItemElementVsoePermitDiscount.from_dict(obj["vsoePermitDiscount"]) if obj.get("vsoePermitDiscount") is not None else None,
            "quantityCommitted": obj.get("quantityCommitted"),
            "custcol_statistical_value": obj.get("custcol_statistical_value"),
            "custcol3": obj.get("custcol3"),
            "custcol4": obj.get("custcol4"),
            "oqpBucket": obj.get("oqpBucket"),
            "vsoeAmount": obj.get("vsoeAmount"),
            "itemSubtype": VendorBillItemElementItemSubtype.from_dict(obj["itemSubtype"]) if obj.get("itemSubtype") is not None else None,
            "custcol_4601_witaxamt_exp": obj.get("custcol_4601_witaxamt_exp"),
            "custcol_ff_sc_po_line": obj.get("custcol_ff_sc_po_line"),
            "custcol_ph4014_src_tranintid": obj.get("custcol_ph4014_src_tranintid"),
            "custcol_description_location": obj.get("custcol_description_location"),
            "custcol_mark_as_optional": obj.get("custcol_mark_as_optional"),
            "matrixType": obj.get("matrixType"),
            "custcol_4601_witaxrate_exp": obj.get("custcol_4601_witaxrate_exp"),
            "custcol_msl_labourcost": obj.get("custcol_msl_labourcost"),
            "isOpen": obj.get("isOpen"),
            "line": obj.get("line"),
            "description": obj.get("description"),
            "isClosed": obj.get("isClosed"),
            "units": obj.get("units"),
            "custcol_statistical_value_base_curr": obj.get("custcol_statistical_value_base_curr"),
            "vsoeSOPGroup": CreditMemoItemElementVsoeSOPGroup.from_dict(obj["vsoeSOPGroup"]) if obj.get("vsoeSOPGroup") is not None else None,
            "custcol_nx_foreignamount": obj.get("custcol_nx_foreignamount"),
            "rate": obj.get("rate"),
            "marginal": obj.get("marginal"),
            "costEstimateRate": obj.get("costEstimateRate"),
            "minQty": obj.get("minQty"),
            "custcol_nx_time_cost": obj.get("custcol_nx_time_cost"),
            "printItems": obj.get("printItems"),
            "amount": obj.get("amount"),
            "quantity": obj.get("quantity"),
            "initOqpBucket": obj.get("initOqpBucket"),
            "custcol_zc_vendor_txn_idx": obj.get("custcol_zc_vendor_txn_idx"),
            "custcol_zc_3wm_matching_summary": obj.get("custcol_zc_3wm_matching_summary"),
            "custcol_nxc_end_time": obj.get("custcol_nxc_end_time"),
            "vsoePrice": obj.get("vsoePrice"),
            "custcol_4601_witaxapplies": obj.get("custcol_4601_witaxapplies"),
            "orderLine": obj.get("orderLine"),
            "custcol_nxc_start_time": obj.get("custcol_nxc_start_time"),
            "itemType": InvoiceExpCostElementCustcolZcItemType.from_dict(obj["itemType"]) if obj.get("itemType") is not None else None,
            "custcol_ff_sc_matching_status_inline": obj.get("custcol_ff_sc_matching_status_inline"),
            "custcol_bb1_ventro_fp_orig_rate": obj.get("custcol_bb1_ventro_fp_orig_rate"),
            "costEstimate": obj.get("costEstimate"),
            "custcol_bb1_targetmarginline": obj.get("custcol_bb1_targetmarginline"),
            "custcol_nxc_start_check": obj.get("custcol_nxc_start_check"),
            "custcol_4601_witaxline_exp": obj.get("custcol_4601_witaxline_exp"),
            "refName": obj.get("refName"),
            "custcol_ff_sc_po_id": NsResource.from_dict(obj["custcol_ff_sc_po_id"]) if obj.get("custcol_ff_sc_po_id") is not None else None,
            "custcol_statistical_procedure_purc": NsResource.from_dict(obj["custcol_statistical_procedure_purc"]) if obj.get("custcol_statistical_procedure_purc") is not None else None,
            "custcolprojectframeworkprovider": NsResource.from_dict(obj["custcolprojectframeworkprovider"]) if obj.get("custcolprojectframeworkprovider") is not None else None,
            "custcol_vl_tax_code_print": SalesTaxItem.from_dict(obj["custcol_vl_tax_code_print"]) if obj.get("custcol_vl_tax_code_print") is not None else None,
            "class": NsResource.from_dict(obj["class"]) if obj.get("class") is not None else None,
            "custcol_ff_sc_matching_status": NsResource.from_dict(obj["custcol_ff_sc_matching_status"]) if obj.get("custcol_ff_sc_matching_status") is not None else None,
            "custcolpmschedulerline": NsResource.from_dict(obj["custcolpmschedulerline"]) if obj.get("custcolpmschedulerline") is not None else None,
            "custcol_expense_code_of_supply": NsResource.from_dict(obj["custcol_expense_code_of_supply"]) if obj.get("custcol_expense_code_of_supply") is not None else None,
            "cseg_paactivitycode": NsResource.from_dict(obj["cseg_paactivitycode"]) if obj.get("cseg_paactivitycode") is not None else None,
            "custcol_adjustment_tax_code": SalesTaxItem.from_dict(obj["custcol_adjustment_tax_code"]) if obj.get("custcol_adjustment_tax_code") is not None else None,
            "custcolprojectqsline": NsResource.from_dict(obj["custcolprojectqsline"]) if obj.get("custcolprojectqsline") is not None else None,
            "custcol_nx_asset": NsResource.from_dict(obj["custcol_nx_asset"]) if obj.get("custcol_nx_asset") is not None else None,
            "inventoryDetail": InvoiceItemInventoryDetail.from_dict(obj["inventoryDetail"]) if obj.get("inventoryDetail") is not None else None,
            "custcol_nature_of_transaction_codes": NsResource.from_dict(obj["custcol_nature_of_transaction_codes"]) if obj.get("custcol_nature_of_transaction_codes") is not None else None,
            "custcol_nx_projecttask": NsResource.from_dict(obj["custcol_nx_projecttask"]) if obj.get("custcol_nx_projecttask") is not None else None,
            "custcolrequestorline": NsResource.from_dict(obj["custcolrequestorline"]) if obj.get("custcolrequestorline") is not None else None,
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "custcol_sales_consultant_line": NsResource.from_dict(obj["custcol_sales_consultant_line"]) if obj.get("custcol_sales_consultant_line") is not None else None,
            "custcol_bb1_suiteprojects_project_lin": NsResource.from_dict(obj["custcol_bb1_suiteprojects_project_lin"]) if obj.get("custcol_bb1_suiteprojects_project_lin") is not None else None,
            "price": NsResource.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "custcol_subcontractor": Vendor.from_dict(obj["custcol_subcontractor"]) if obj.get("custcol_subcontractor") is not None else None,
            "custcol_nx_consumable": NsResource.from_dict(obj["custcol_nx_consumable"]) if obj.get("custcol_nx_consumable") is not None else None,
            "subsidiary": NsResource.from_dict(obj["subsidiary"]) if obj.get("subsidiary") is not None else None,
            "custcol_ph4014_src_vendorid": Vendor.from_dict(obj["custcol_ph4014_src_vendorid"]) if obj.get("custcol_ph4014_src_vendorid") is not None else None,
            "custcol_ph4014_src_empid": NsResource.from_dict(obj["custcol_ph4014_src_empid"]) if obj.get("custcol_ph4014_src_empid") is not None else None,
            "custcol_ph4014_src_custid": Customer.from_dict(obj["custcol_ph4014_src_custid"]) if obj.get("custcol_ph4014_src_custid") is not None else None,
            "department": NsResource.from_dict(obj["department"]) if obj.get("department") is not None else None,
            "custcol_ff_sc_vatex_reason": NsResource.from_dict(obj["custcol_ff_sc_vatex_reason"]) if obj.get("custcol_ff_sc_vatex_reason") is not None else None,
            "custcol_4601_witaxcode": NsResource.from_dict(obj["custcol_4601_witaxcode"]) if obj.get("custcol_4601_witaxcode") is not None else None,
            "custcol_4601_witaxcode_exp": NsResource.from_dict(obj["custcol_4601_witaxcode_exp"]) if obj.get("custcol_4601_witaxcode_exp") is not None else None,
            "custcol_nxc_case": NsResource.from_dict(obj["custcol_nxc_case"]) if obj.get("custcol_nxc_case") is not None else None,
            "custcol_nx_task": NsResource.from_dict(obj["custcol_nx_task"]) if obj.get("custcol_nx_task") is not None else None,
            "custcol_bb1_labour_type": NsResource.from_dict(obj["custcol_bb1_labour_type"]) if obj.get("custcol_bb1_labour_type") is not None else None,
            "custcol_nondeductible_account": Account.from_dict(obj["custcol_nondeductible_account"]) if obj.get("custcol_nondeductible_account") is not None else None,
            "custcol_statistical_procedure_sale": NsResource.from_dict(obj["custcol_statistical_procedure_sale"]) if obj.get("custcol_statistical_procedure_sale") is not None else None,
            "item": InvoiceItemCostElementItem.from_dict(obj["item"]) if obj.get("item") is not None else None,
            "custcol_emirate": NsResource.from_dict(obj["custcol_emirate"]) if obj.get("custcol_emirate") is not None else None,
            "custcol_bb1_vehicle_expense": NsResource.from_dict(obj["custcol_bb1_vehicle_expense"]) if obj.get("custcol_bb1_vehicle_expense") is not None else None,
            "chargeType": NsResource.from_dict(obj["chargeType"]) if obj.get("chargeType") is not None else None,
            "custcol_vl_linked_transaction": NsResource.from_dict(obj["custcol_vl_linked_transaction"]) if obj.get("custcol_vl_linked_transaction") is not None else None,
            "location": NsResource.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "custcol_4601_itemdefaultwitaxcode": NsResource.from_dict(obj["custcol_4601_itemdefaultwitaxcode"]) if obj.get("custcol_4601_itemdefaultwitaxcode") is not None else None,
            "custcol_ph4014_src_jrnltrantypeid": NsResource.from_dict(obj["custcol_ph4014_src_jrnltrantypeid"]) if obj.get("custcol_ph4014_src_jrnltrantypeid") is not None else None,
            "custcol_nx_case": NsResource.from_dict(obj["custcol_nx_case"]) if obj.get("custcol_nx_case") is not None else None,
            "cseg_accreditations": NsResource.from_dict(obj["cseg_accreditations"]) if obj.get("cseg_accreditations") is not None else None,
            "custcol_pocase": NsResource.from_dict(obj["custcol_pocase"]) if obj.get("custcol_pocase") is not None else None,
            "orderDoc": NsResource.from_dict(obj["orderDoc"]) if obj.get("orderDoc") is not None else None,
            "custcol_ff_sc_ammr_rule_applied": NsResource.from_dict(obj["custcol_ff_sc_ammr_rule_applied"]) if obj.get("custcol_ff_sc_ammr_rule_applied") is not None else None
        })
        return _obj


