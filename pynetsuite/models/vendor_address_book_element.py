# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-02 at 01:07:42 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.vendor_address_book_address_book_address import VendorAddressBookAddressBookAddress
from typing import Optional, Set
from typing_extensions import Self

class VendorAddressBookElement(BaseModel):
    """
    VendorAddressBookElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    internal_id: Optional[StrictInt] = Field(default=None, alias="internalId")
    default_billing: Optional[StrictBool] = Field(default=None, alias="defaultBilling")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    address_book_address_text: Optional[StrictStr] = Field(default=None, alias="addressBookAddress_text")
    default_shipping: Optional[StrictBool] = Field(default=None, alias="defaultShipping")
    label: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    address_id: Optional[StrictStr] = Field(default=None, alias="addressId")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    address_book_address: Optional[VendorAddressBookAddressBookAddress] = Field(default=None, alias="addressBookAddress")
    __properties: ClassVar[List[str]] = ["links", "internalId", "defaultBilling", "lastModifiedDate", "addressBookAddress_text", "defaultShipping", "label", "id", "addressId", "refName", "addressBookAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VendorAddressBookElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of address_book_address
        if self.address_book_address:
            _dict['addressBookAddress'] = self.address_book_address.to_dict()
        # set to None if internal_id (nullable) is None
        # and model_fields_set contains the field
        if self.internal_id is None and "internal_id" in self.model_fields_set:
            _dict['internalId'] = None

        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if address_book_address_text (nullable) is None
        # and model_fields_set contains the field
        if self.address_book_address_text is None and "address_book_address_text" in self.model_fields_set:
            _dict['addressBookAddress_text'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if address_id (nullable) is None
        # and model_fields_set contains the field
        if self.address_id is None and "address_id" in self.model_fields_set:
            _dict['addressId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VendorAddressBookElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "internalId": obj.get("internalId"),
            "defaultBilling": obj.get("defaultBilling"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "addressBookAddress_text": obj.get("addressBookAddress_text"),
            "defaultShipping": obj.get("defaultShipping"),
            "label": obj.get("label"),
            "id": obj.get("id"),
            "addressId": obj.get("addressId"),
            "refName": obj.get("refName"),
            "addressBookAddress": VendorAddressBookAddressBookAddress.from_dict(obj["addressBookAddress"]) if obj.get("addressBookAddress") is not None else None
        })
        return _obj


