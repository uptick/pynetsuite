# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-02 at 01:07:42 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pynetsuite.models.currency import Currency
from pynetsuite.models.currency_symbol_placement import CurrencySymbolPlacement
from pynetsuite.models.ns_link import NsLink
from typing import Optional, Set
from typing_extensions import Self

class CustomerCurrencyListElement(BaseModel):
    """
    CustomerCurrencyListElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    override_currency_format: Optional[StrictBool] = Field(default=None, alias="overrideCurrencyFormat")
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    deposit_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="depositBalance")
    unbilled_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unbilledOrders")
    symbol_placement: Optional[CurrencySymbolPlacement] = Field(default=None, alias="symbolPlacement")
    overdue_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="overdueBalance")
    display_symbol: Optional[StrictStr] = Field(default=None, alias="displaySymbol")
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    currency: Optional[Currency] = None
    __properties: ClassVar[List[str]] = ["links", "overrideCurrencyFormat", "balance", "depositBalance", "unbilledOrders", "symbolPlacement", "overdueBalance", "displaySymbol", "refName", "currency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerCurrencyListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of symbol_placement
        if self.symbol_placement:
            _dict['symbolPlacement'] = self.symbol_placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # set to None if balance (nullable) is None
        # and model_fields_set contains the field
        if self.balance is None and "balance" in self.model_fields_set:
            _dict['balance'] = None

        # set to None if deposit_balance (nullable) is None
        # and model_fields_set contains the field
        if self.deposit_balance is None and "deposit_balance" in self.model_fields_set:
            _dict['depositBalance'] = None

        # set to None if unbilled_orders (nullable) is None
        # and model_fields_set contains the field
        if self.unbilled_orders is None and "unbilled_orders" in self.model_fields_set:
            _dict['unbilledOrders'] = None

        # set to None if overdue_balance (nullable) is None
        # and model_fields_set contains the field
        if self.overdue_balance is None and "overdue_balance" in self.model_fields_set:
            _dict['overdueBalance'] = None

        # set to None if display_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.display_symbol is None and "display_symbol" in self.model_fields_set:
            _dict['displaySymbol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerCurrencyListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "overrideCurrencyFormat": obj.get("overrideCurrencyFormat"),
            "balance": obj.get("balance"),
            "depositBalance": obj.get("depositBalance"),
            "unbilledOrders": obj.get("unbilledOrders"),
            "symbolPlacement": CurrencySymbolPlacement.from_dict(obj["symbolPlacement"]) if obj.get("symbolPlacement") is not None else None,
            "overdueBalance": obj.get("overdueBalance"),
            "displaySymbol": obj.get("displaySymbol"),
            "refName": obj.get("refName"),
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None
        })
        return _obj


