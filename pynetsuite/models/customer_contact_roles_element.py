# coding: utf-8

"""
    NetSuite REST Record API

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynetsuite.models.ns_link import NsLink
from pynetsuite.models.ns_resource import NsResource
from typing import Optional, Set
from typing_extensions import Self

class CustomerContactRolesElement(BaseModel):
    """
    CustomerContactRolesElement
    """ # noqa: E501
    links: Optional[List[NsLink]] = None
    contact_name: Optional[StrictStr] = Field(default=None, alias="contactName")
    give_access: Optional[StrictBool] = Field(default=None, alias="giveAccess")
    password: Optional[StrictStr] = None
    password_confirm: Optional[StrictStr] = Field(default=None, alias="passwordConfirm")
    email: Optional[StrictStr] = None
    ref_name: Optional[StrictStr] = Field(default=None, alias="refName")
    role: Optional[NsResource] = None
    contact: Optional[NsResource] = None
    __properties: ClassVar[List[str]] = ["links", "contactName", "giveAccess", "password", "passwordConfirm", "email", "refName", "role", "contact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerContactRolesElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "links",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        # set to None if contact_name (nullable) is None
        # and model_fields_set contains the field
        if self.contact_name is None and "contact_name" in self.model_fields_set:
            _dict['contactName'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if password_confirm (nullable) is None
        # and model_fields_set contains the field
        if self.password_confirm is None and "password_confirm" in self.model_fields_set:
            _dict['passwordConfirm'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerContactRolesElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "links": [NsLink.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "contactName": obj.get("contactName"),
            "giveAccess": obj.get("giveAccess"),
            "password": obj.get("password"),
            "passwordConfirm": obj.get("passwordConfirm"),
            "email": obj.get("email"),
            "refName": obj.get("refName"),
            "role": NsResource.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "contact": NsResource.from_dict(obj["contact"]) if obj.get("contact") is not None else None
        })
        return _obj


