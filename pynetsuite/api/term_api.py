# coding: utf-8

"""
    NetSuite REST Record API

    NetSuite REST Record API generated 2025-09-01 at 22:32:31 UTC.

    The version of the OpenAPI document: v1
    Contact: info@netsuite.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from pynetsuite.models.term import Term
from pynetsuite.models.term_collection import TermCollection

from pynetsuite.api_client import ApiClient, RequestSerialized
from pynetsuite.api_response import ApiResponse
from pynetsuite.rest import RESTResponseType


class TermApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def term_get(
        self,
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The search query that is used to filter results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The limit used to specify the number of results on a single page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The offset used for selecting a specific page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TermCollection:
        """Get list of records.


        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param q: The search query that is used to filter results.
        :type q: str
        :param limit: The limit used to specify the number of results on a single page.
        :type limit: int
        :param offset: The offset used for selecting a specific page of results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_get_serialize(
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            q=q,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TermCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_get_with_http_info(
        self,
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The search query that is used to filter results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The limit used to specify the number of results on a single page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The offset used for selecting a specific page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TermCollection]:
        """Get list of records.


        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param q: The search query that is used to filter results.
        :type q: str
        :param limit: The limit used to specify the number of results on a single page.
        :type limit: int
        :param offset: The offset used for selecting a specific page of results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_get_serialize(
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            q=q,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TermCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_get_without_preload_content(
        self,
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        q: Annotated[Optional[StrictStr], Field(description="The search query that is used to filter results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="The limit used to specify the number of results on a single page.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The offset used for selecting a specific page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get list of records.


        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param q: The search query that is used to filter results.
        :type q: str
        :param limit: The limit used to specify the number of results on a single page.
        :type limit: int
        :param offset: The offset used for selecting a specific page of results.
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_get_serialize(
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            q=q,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TermCollection",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_get_serialize(
        self,
        prefer,
        x_net_suite_idempotency_key,
        q,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=collection', 
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/term',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def term_id_delete(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_delete_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_id_delete_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_delete_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_id_delete_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_delete_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_id_delete_serialize(
        self,
        id,
        prefer,
        x_net_suite_idempotency_key,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/term/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def term_id_get(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        expand_sub_resources: Annotated[Optional[StrictBool], Field(description="Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.")] = None,
        simple_enum_format: Annotated[Optional[StrictBool], Field(description="Set to true to return enumeration values in a format that only shows the internal ID value.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Term:
        """Get record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param expand_sub_resources: Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.
        :type expand_sub_resources: bool
        :param simple_enum_format: Set to true to return enumeration values in a format that only shows the internal ID value.
        :type simple_enum_format: bool
        :param fields: The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_get_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            expand_sub_resources=expand_sub_resources,
            simple_enum_format=simple_enum_format,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Term",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_id_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        expand_sub_resources: Annotated[Optional[StrictBool], Field(description="Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.")] = None,
        simple_enum_format: Annotated[Optional[StrictBool], Field(description="Set to true to return enumeration values in a format that only shows the internal ID value.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Term]:
        """Get record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param expand_sub_resources: Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.
        :type expand_sub_resources: bool
        :param simple_enum_format: Set to true to return enumeration values in a format that only shows the internal ID value.
        :type simple_enum_format: bool
        :param fields: The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_get_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            expand_sub_resources=expand_sub_resources,
            simple_enum_format=simple_enum_format,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Term",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_id_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        expand_sub_resources: Annotated[Optional[StrictBool], Field(description="Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.")] = None,
        simple_enum_format: Annotated[Optional[StrictBool], Field(description="Set to true to return enumeration values in a format that only shows the internal ID value.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get record.


        :param id: Internal identifier. (required)
        :type id: int
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param expand_sub_resources: Set to 'true' to automatically expand all sublists, sublist lines, and subrecords on this record.
        :type expand_sub_resources: bool
        :param simple_enum_format: Set to true to return enumeration values in a format that only shows the internal ID value.
        :type simple_enum_format: bool
        :param fields: The names of the fields and sublists on the record. Only the selected fields and sublists will be returned in the response.
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_get_serialize(
            id=id,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            expand_sub_resources=expand_sub_resources,
            simple_enum_format=simple_enum_format,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Term",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_id_get_serialize(
        self,
        id,
        prefer,
        x_net_suite_idempotency_key,
        expand_sub_resources,
        simple_enum_format,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if expand_sub_resources is not None:
            
            _query_params.append(('expandSubResources', expand_sub_resources))
            
        if simple_enum_format is not None:
            
            _query_params.append(('simpleEnumFormat', simple_enum_format))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=singular', 
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/term/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def term_id_patch(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update record.


        :param id: Internal identifier. (required)
        :type id: int
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_patch_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_id_patch_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update record.


        :param id: Internal identifier. (required)
        :type id: int
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_patch_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_id_patch_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="Internal identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update record.


        :param id: Internal identifier. (required)
        :type id: int
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_patch_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_id_patch_serialize(
        self,
        id,
        term,
        prefer,
        x_net_suite_idempotency_key,
        x_net_suite_property_name_validation,
        x_net_suite_property_value_validation,
        replace,
        replace_selected_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if replace is not None:
            
            _query_params.append(('replace', replace))
            
        if replace_selected_fields is not None:
            
            _query_params.append(('replaceSelectedFields', replace_selected_fields))
            
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        if x_net_suite_property_name_validation is not None:
            _header_params['X-NetSuite-PropertyNameValidation'] = x_net_suite_property_name_validation
        if x_net_suite_property_value_validation is not None:
            _header_params['X-NetSuite-PropertyValueValidation'] = x_net_suite_property_value_validation
        # process the form parameters
        # process the body parameter
        if term is not None:
            _body_params = term


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.oracle.resource+json; type=singular'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/term/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def term_id_put(
        self,
        id: Annotated[str, Field(strict=True, description="External identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Insert or update record.


        :param id: External identifier. (required)
        :type id: str
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_put_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_id_put_with_http_info(
        self,
        id: Annotated[str, Field(strict=True, description="External identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Insert or update record.


        :param id: External identifier. (required)
        :type id: str
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_put_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_id_put_without_preload_content(
        self,
        id: Annotated[str, Field(strict=True, description="External identifier.")],
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        replace_selected_fields: Annotated[Optional[StrictBool], Field(description="If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert or update record.


        :param id: External identifier. (required)
        :type id: str
        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param replace_selected_fields: If set to 'true', all fields that should be deleted in the update request, including body fields, must be included in the 'replace' query parameter.
        :type replace_selected_fields: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_id_put_serialize(
            id=id,
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            replace=replace,
            replace_selected_fields=replace_selected_fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_id_put_serialize(
        self,
        id,
        term,
        prefer,
        x_net_suite_idempotency_key,
        x_net_suite_property_name_validation,
        x_net_suite_property_value_validation,
        replace,
        replace_selected_fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if replace is not None:
            
            _query_params.append(('replace', replace))
            
        if replace_selected_fields is not None:
            
            _query_params.append(('replaceSelectedFields', replace_selected_fields))
            
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        if x_net_suite_property_name_validation is not None:
            _header_params['X-NetSuite-PropertyNameValidation'] = x_net_suite_property_name_validation
        if x_net_suite_property_value_validation is not None:
            _header_params['X-NetSuite-PropertyValueValidation'] = x_net_suite_property_value_validation
        # process the form parameters
        # process the body parameter
        if term is not None:
            _body_params = term


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.oracle.resource+json; type=singular'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/term/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def term_post(
        self,
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Insert record.


        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_post_serialize(
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            replace=replace,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def term_post_with_http_info(
        self,
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Insert record.


        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_post_serialize(
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            replace=replace,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def term_post_without_preload_content(
        self,
        term: Annotated[Term, Field(description="Request body.")],
        prefer: Annotated[Optional[StrictStr], Field(description="The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.")] = None,
        x_net_suite_idempotency_key: Annotated[Optional[StrictStr], Field(description="A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.")] = None,
        replace: Annotated[Optional[StrictStr], Field(description="The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.")] = None,
        x_net_suite_property_name_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property name validation.")] = None,
        x_net_suite_property_value_validation: Annotated[Optional[StrictStr], Field(description="Sets the strictness of property value validation.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insert record.


        :param term: Request body. (required)
        :type term: Term
        :param prefer: The server behavior requested by the client. Use 'respond-async' to execute the request asynchronously. If the request is executed asynchronously, 'Preference-applied: respond-async' is returned in the response.
        :type prefer: str
        :param x_net_suite_idempotency_key: A user-defined unique idempotency key that is applied to every asynchronous requests to ensure that the request is executed only once. Only one request can be executed with every unique idempotency key. Use UUID in string format as defined by RFC 4122. If the request is executed synchronously, this value is ignored.
        :type x_net_suite_idempotency_key: str
        :param replace: The names of sublists on this record. All sublist lines will be replaced with lines specified in the request. The names are delimited by comma.
        :type replace: str
        :param x_net_suite_property_name_validation: Sets the strictness of property name validation.
        :type x_net_suite_property_name_validation: str
        :param x_net_suite_property_value_validation: Sets the strictness of property value validation.
        :type x_net_suite_property_value_validation: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._term_post_serialize(
            term=term,
            prefer=prefer,
            x_net_suite_idempotency_key=x_net_suite_idempotency_key,
            replace=replace,
            x_net_suite_property_name_validation=x_net_suite_property_name_validation,
            x_net_suite_property_value_validation=x_net_suite_property_value_validation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _term_post_serialize(
        self,
        term,
        prefer,
        x_net_suite_idempotency_key,
        replace,
        x_net_suite_property_name_validation,
        x_net_suite_property_value_validation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if replace is not None:
            
            _query_params.append(('replace', replace))
            
        # process the header parameters
        if prefer is not None:
            _header_params['Prefer'] = prefer
        if x_net_suite_idempotency_key is not None:
            _header_params['X-NetSuite-Idempotency-Key'] = x_net_suite_idempotency_key
        if x_net_suite_property_name_validation is not None:
            _header_params['X-NetSuite-PropertyNameValidation'] = x_net_suite_property_name_validation
        if x_net_suite_property_value_validation is not None:
            _header_params['X-NetSuite-PropertyValueValidation'] = x_net_suite_property_value_validation
        # process the form parameters
        # process the body parameter
        if term is not None:
            _body_params = term


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/vnd.oracle.resource+json; type=error'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.oracle.resource+json; type=singular'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'OAuth_1.0_authorization'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/term',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


